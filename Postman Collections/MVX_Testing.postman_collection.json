{
	"info": {
		"_postman_id": "14ae7039-ccfa-4582-a3d5-f3e856d5919d",
		"name": "MVX_Testing",
		"description": "Collection for testing APIs on MVX Testing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItems Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentNumberMissed, contentDisplayNameMissed, contentDisplayNameInLocalLanguageMissed, contentunitPriceMissed, contentUnitPriceInclVATMissed, contentBlockedMissed, contentInactiveMissed, contentSalesStartDateMissed, contentEndDateSalesMissed, contentItemCategoryMissed, contentAssemblyItemMissed, contentWidthMissed, contentHeightMissed, contentLengthMissed, contentGrossWeightMissed, contentUnitVolumeMissed, contentLastModifiedDateTimeMissed, contentUnitsPerParcelMissed,contentimvItemsBuyableOnlineMissed, contentimvItemsOnlineInfoMissed, contentimvItemsSellingInfoMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"number\"))",
							"            contentNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"displayNameInLocalLanguage\"))",
							"            contentDisplayNameInLocalLanguageMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPrice\"))",
							"            contentunitPriceMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPriceInclVAT\"))",
							"            contentUnitPriceInclVATMissed = true;",
							"        if(!param.hasOwnProperty(\"blocked\"))",
							"            contentBlockedMissed = true;",
							"        if(!param.hasOwnProperty(\"inactive\"))",
							"            contentInactiveMissed = true;",
							"        if(!param.hasOwnProperty(\"salesStartDate\"))",
							"            contentSalesStartDateMissed = true;",
							"        if(!param.hasOwnProperty(\"endDateSales\"))",
							"            contentEndDateSalesMissed = true;",
							"        if(!param.hasOwnProperty(\"itemCategory\"))",
							"            contentItemCategoryMissed = true;",
							"        if(!param.hasOwnProperty(\"assemblyItem\"))",
							"            contentAssemblyItemMissed = true;",
							"        if(!param.hasOwnProperty(\"width\"))",
							"            contentWidthMissed = true;",
							"        if(!param.hasOwnProperty(\"height\"))",
							"            contentHeightMissed = true;   ",
							"        if(!param.hasOwnProperty(\"length\"))",
							"            contentLengthMissed = true;",
							"        if(!param.hasOwnProperty(\"grossWeight\"))",
							"            contentGrossWeightMissed = true;  ",
							"        if(!param.hasOwnProperty(\"unitVolume\"))",
							"            contentUnitVolumeMissed = true;            ",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"unitsPerParcel\"))",
							"            contentUnitsPerParcelMissed = true;",
							"        if(!param.hasOwnProperty(\"imvItemsBuyableOnline\"))",
							"            contentimvItemsBuyableOnlineMissed = true;",
							"        if(!param.hasOwnProperty(\"imvItemsOnlineInfo\"))",
							"            contentimvItemsOnlineInfoMissed = true;    ",
							"        if (param.hasOwnProperty(\"imvItemsOnlineInfo\"))",
							"        {",
							"            param.imvItemsOnlineInfo.forEach(function(param){",
							"                tests[\"imvItemsOnlineInfo contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvItemsOnlineInfo contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");",
							"                tests[\"imvItemsOnlineInfo contains 'pickingBinCode'\"] = param.hasOwnProperty(\"pickingBinCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'replenishmentCode'\"] = param.hasOwnProperty(\"replenishmentCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeCode'\"] = param.hasOwnProperty(\"rangeCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeCodeNextYear'\"] = param.hasOwnProperty(\"rangeCodeNextYear\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeOfferThisPCD'\"] = param.hasOwnProperty(\"rangeOfferThisPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeOfferNextPCD'\"] = param.hasOwnProperty(\"rangeOfferNextPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'commClassThisPCD'\"] = param.hasOwnProperty(\"commClassThisPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'commClassNextPCD'\"] = param.hasOwnProperty(\"commClassNextPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeStatus'\"] = param.hasOwnProperty(\"rangeStatus\");",
							"                tests[\"imvItemsOnlineInfo contains 'serviceLevel'\"] = param.hasOwnProperty(\"serviceLevel\");",
							"                tests[\"imvItemsOnlineInfo contains 'quantitySold'\"] = param.hasOwnProperty(\"quantitySold\");",
							"                tests[\"imvItemsOnlineInfo contains 'previousYearStructure'\"] = param.hasOwnProperty(\"previousYearStructure\");",
							"                tests[\"imvItemsOnlineInfo contains 'nextYearStructure'\"] = param.hasOwnProperty(\"nextYearStructure\");",
							"                tests[\"imvItemsOnlineInfo contains 'acesAndKing'\"] = param.hasOwnProperty(\"acesAndKing\");",
							"            })",
							"        }",
							"        if(!param.hasOwnProperty(\"imvItemsSellingInfo\"))",
							"            contentimvItemsSellingInfoMissed = true;   ",
							"        if (param.hasOwnProperty(\"imvItemsSellingInfo\"))",
							"        {",
							"            param.imvItemsSellingInfo.forEach(function(param){",
							"                tests[\"imvItemsOnlineInfo contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvItemsOnlineInfo contains 'aws'\"] = param.hasOwnProperty(\"aws\");",
							"                tests[\"imvItemsOnlineInfo contains 'assembled'\"] = param.hasOwnProperty(\"assembled\");",
							"            })",
							"        }",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentNumberMissed = contentDisplayNameMissed = contentDisplayNameInLocalLanguageMissed = contentunitPriceMissed = contentUnitPriceInclVATMissed = contentBlockedMissed = contentInactiveMissed = contentSalesStartDateMissed = contentEndDateSalesMissed = contentItemCategoryMissed = contentAssemblyItemMissed = contentWidthMissed = contentHeightMissed = contentLengthMissed = contentGrossWeightMissed = contentUnitVolumeMissed = contentLastModifiedDateTimeMissed = contentUnitsPerParcelMissed = contentimvItemsBuyableOnlineMissed = contentimvItemsOnlineInfoMissed = contentimvItemsSellingInfoMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'number'\"] = !contentNumberMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'displayNameInLocalLanguage'\"] = !contentDisplayNameInLocalLanguageMissed;",
							"tests[\"Body contains 'unitPrice'\"] = !contentunitPriceMissed;",
							"tests[\"Body contains 'unitPriceInclVAT'\"] = !contentUnitPriceInclVATMissed;",
							"tests[\"Body contains 'blocked'\"] = !contentBlockedMissed;",
							"tests[\"Body contains 'inactive'\"] = !contentInactiveMissed;",
							"tests[\"Body contains 'salesStartDate'\"] = !contentSalesStartDateMissed;",
							"tests[\"Body contains 'endDateSales'\"] = !contentEndDateSalesMissed;",
							"tests[\"Body contains 'itemCategory'\"] = !contentItemCategoryMissed;",
							"tests[\"Body contains 'assemblyItem'\"] = !contentAssemblyItemMissed;",
							"tests[\"Body contains 'width'\"] = !contentWidthMissed;",
							"tests[\"Body contains 'height'\"] = !contentHeightMissed;",
							"tests[\"Body contains 'length'\"] = !contentLengthMissed;",
							"tests[\"Body contains 'grossWeight'\"] = !contentGrossWeightMissed;",
							"tests[\"Body contains 'unitVolume'\"] = !contentUnitVolumeMissed;",
							"tests[\"Body contains 'unitsPerParcel'\"] = !contentUnitsPerParcelMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'imvItemsBuyableOnline'\"] = !contentimvItemsBuyableOnlineMissed;",
							"tests[\"Body contains 'imvItemsOnlineInfo'\"] = !contentimvItemsOnlineInfoMissed;",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItems?$expand=imvItemsBuyableOnline,imvItemsOnlineInfo,imvItemsSellingInfo",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItems"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvItemsBuyableOnline,imvItemsOnlineInfo,imvItemsSellingInfo"
						}
					]
				},
				"description": "Show MVXs' Items"
			},
			"response": []
		},
		{
			"name": "SPRs",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvSprs Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentNumberMissed, contentTypeMissed, contentDisplayNameMissed, contentDisplayNameInLocalLanguageMissed, contentUnitPriceInclVATMissed, contenFullyReleasedMissed,  contentEndDateSalesMissed, contentSalesStartDateMissed, contentActiveMissed, contentSaleableMissed, contentNumberOfPackagesMissed, contentNumberOfArticlesMissed, contentSprCategoryMissed, contentLastModifiedDateTimeMissed, contentImvSprItemsMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"number\"))",
							"            contentNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"type\"))",
							"            contentTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"displayNameInLocalLanguage\"))",
							"            contentDisplayNameInLocalLanguageMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPriceInclVAT\"))",
							"            contentUnitPriceInclVATMissed = true;",
							"        if(!param.hasOwnProperty(\"fullyReleased\"))",
							"            contenFullyReleasedMissed = true;",
							"        if(!param.hasOwnProperty(\"endDateSales\"))",
							"            contentEndDateSalesMissed = true;",
							"        if(!param.hasOwnProperty(\"salesStartDate\"))",
							"            contentSalesStartDateMissed = true;",
							"        if(!param.hasOwnProperty(\"active\"))",
							"            contentActiveMissed = true;",
							"        if(!param.hasOwnProperty(\"saleable\"))",
							"            contentSaleableMissed = true;",
							"        if(!param.hasOwnProperty(\"numberOfPackages\"))",
							"            contentNumberOfPackagesMissed = true;",
							"        if(!param.hasOwnProperty(\"numberOfArticles\"))",
							"            contentNumberOfArticlesMissed = true;",
							"        if(!param.hasOwnProperty(\"sprCategory\"))",
							"            contentSprCategoryMissed = true;",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvSprItems\"))",
							"            contentImvSprItemsMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentNumberMissed = contentTypeMissed = contentDisplayNameMissed = contentDisplayNameInLocalLanguageMissed = contentUnitPriceInclVATMissed = contenFullyReleasedMissed =  contentEndDateSalesMissed = contentSalesStartDateMissed = contentActiveMissed = contentSaleableMissed = contentNumberOfPackagesMissed = contentNumberOfArticlesMissed = contentSprCategoryMissed = contentLastModifiedDateTimeMissed = contentImvSprItemsMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'number'\"] = !contentNumberMissed;",
							"tests[\"Body contains 'type'\"] = !contentTypeMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'displayNameInLocalLanguage'\"] = !contentDisplayNameInLocalLanguageMissed;",
							"tests[\"Body contains 'unitPriceInclVAT'\"] = !contentUnitPriceInclVATMissed;",
							"tests[\"Body contains 'fullyReleased'\"] = !contenFullyReleasedMissed;",
							"tests[\"Body contains 'endDateSales'\"] = !contentEndDateSalesMissed;",
							"tests[\"Body contains 'salesStartDate'\"] = !contentSalesStartDateMissed;",
							"tests[\"Body contains 'active'\"] = !contentActiveMissed;",
							"tests[\"Body contains 'saleable'\"] = !contentSaleableMissed;",
							"tests[\"Body contains 'numberOfPackages'\"] = !contentNumberOfPackagesMissed;",
							"tests[\"Body contains 'numberOfArticles'\"] = !contentNumberOfArticlesMissed;",
							"tests[\"Body contains 'sprCategory'\"] = !contentSprCategoryMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'imvSprItems'\"] = !contentImvSprItemsMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvSprs?$expand=imvSprItems",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvSprs"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvSprItems"
						}
					]
				},
				"description": "Show MVXs' SPRs"
			},
			"response": []
		},
		{
			"name": "PostCodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvPostCodes Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentCodeMissed, contentCityMissed, contentAreaCodeMissed, contentCityCodeMissed, contentCountryRegionMissed, contentCountryRegionNameMissed, contentCounty, contentCenterLatitudeMissed, contentCenterLongitudeMissed, contentMinBorderDistanceMissed, contentMaxBorderDistanceMissed, contentLastModifiedDateTimeMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\")) {",
							"    jsonData.value.forEach(function(param) {",
							"        if (!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if (!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if (!param.hasOwnProperty(\"code\"))",
							"            contentNumberMissed = true;",
							"        if (!param.hasOwnProperty(\"city\"))",
							"            contentDisplayNameMissed = true;",
							"        if (!param.hasOwnProperty(\"countryRegion\"))",
							"            contentCountryRegionMissed = true;",
							"        if (!param.hasOwnProperty(\"countryRegionName\"))",
							"            contentCountryRegionNameMissed = true;",
							"",
							"",
							"        if (!param.hasOwnProperty(\"cityCode\"))",
							"            contentCityCodeMissed = true;",
							"",
							"        if (!param.hasOwnProperty(\"areaCode\"))",
							"            contentAreaCodeMissed = true;",
							"",
							"        if (!param.hasOwnProperty(\"county\"))",
							"            contentunitPriceMissed = true;",
							"        if (!param.hasOwnProperty(\"centerLatitude\"))",
							"            contentCenterLatitudeMissed = true;",
							"        if (!param.hasOwnProperty(\"centerLongitude\"))",
							"            contentCenterLongitudeMissed = true;",
							"        if (!param.hasOwnProperty(\"minBorderDistance\"))",
							"            contentMinBorderDistanceMissed = true;",
							"        if (!param.hasOwnProperty(\"maxBorderDistance\"))",
							"            contentMaxBorderDistanceMissed = true;",
							"        if (!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"    })",
							"} else {",
							"    contentOdataEtagMissed = contentIdMissed = contentCodeMissed = contentAreaCodeMissed = contentCityCodeMissed = contentCityMissed = contentCountryRegionMissed = contentCountryRegionNameMissed = contentCounty = contentCenterLatitudeMissed = contentCenterLongitudeMissed = contentMinBorderDistanceMissed = contentMaxBorderDistanceMissed = contentLastModifiedDateTimeMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'code'\"] = !contentCodeMissed;",
							"tests[\"Body contains 'city'\"] = !contentCityMissed;",
							"tests[\"Body contains 'areaCode'\"] = !contentAreaCodeMissed;",
							"tests[\"Body contains 'cityCode'\"] = !contentCityCodeMissed;",
							"tests[\"Body contains 'countryRegion'\"] = !contentCountryRegionMissed;",
							"tests[\"Body contains 'countryRegionName'\"] = !contentCountryRegionNameMissed;",
							"tests[\"Body contains 'county'\"] = !contentCounty;",
							"tests[\"Body contains 'centerLatitude'\"] = !contentCenterLatitudeMissed;",
							"tests[\"Body contains 'centerLongitude'\"] = !contentCenterLongitudeMissed;",
							"tests[\"Body contains 'minBorderDistance'\"] = !contentMinBorderDistanceMissed;",
							"tests[\"Body contains 'maxBorderDistance'\"] = !contentMaxBorderDistanceMissed;",
							"tests[\"Body contains 'LastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPostCodes",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPostCodes"
					]
				},
				"description": "Show MVXs' Post Codes"
			},
			"response": []
		},
		{
			"name": "CapacityAreas",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvCapacityAreas Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentCodeMissed, contentDisplayNameMissed, contentLastModifiedDateTimeMissed, contentImvCapacityPostCodesMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"code\"))",
							"            contentCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvCapacityPostCodes\"))",
							"            contentImvCapacityPostCodesMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentCodeMissed = contentDisplayNameMissed = contentLastModifiedDateTimeMissed = contentImvCapacityPostCodes = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'code'\"] = !contentCodeMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'imvCapacityPostCodes'\"] = !contentImvCapacityPostCodesMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvCapacityAreas?%24expand=imvCapacityPostCodes",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvCapacityAreas"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "imvCapacityPostCodes"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ServiceOrderStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvServiceOrderStatus Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentserviceOrderNoMissed, contentIdMissed, contentstatusMissed, contentpreviousStatusMissed, contentserviceOrdersByStatusMissed, contentsalesChannelTypeMissed, contentlastDateTimeModifiedMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceOrderNo\"))",
							"            contentserviceOrderNoMissed = true;",
							"        if(!param.hasOwnProperty(\"Id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"status\"))",
							"            contentstatusMissed = true;",
							"        if(!param.hasOwnProperty(\"previousStatus\"))",
							"            contentpreviousStatusMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceOrdersByStatus\"))",
							"            contentserviceOrdersByStatusMissed = true;",
							"        if(!param.hasOwnProperty(\"salesChannelType\"))",
							"            contentsalesChannelTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentlastDateTimeModifiedMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentserviceOrderNoMissed = contentIdMissed = contentstatusMissed = contentpreviousStatusMissed = contentserviceOrdersByStatusMissed = contentsalesChannelTypeMissed = contentlastDateTimeModifiedMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'serviceOrderNo'\"] = !contentserviceOrderNoMissed;",
							"tests[\"Body contains 'Id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'status'\"] = !contentstatusMissed;",
							"tests[\"Body contains 'previousStatus'\"] = !contentpreviousStatusMissed;",
							"tests[\"Body contains 'serviceOrdersByStatus'\"] = !contentserviceOrdersByStatusMissed;",
							"tests[\"Body contains 'salesChannelType'\"] = !contentsalesChannelTypeMissed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentlastDateTimeModifiedMissed;",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvServiceOrderStatus?$filter=status eq 'Waiting for Payment'&$expand=serviceOrdersByStatus",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvServiceOrderStatus"
					],
					"query": [
						{
							"key": "$filter",
							"value": "status eq 'Waiting for Payment'"
						},
						{
							"key": "$expand",
							"value": "serviceOrdersByStatus"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PriceAreas",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvPriceAreas Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentCodeMissed, contentDisplayNameMissed, contentLastModifiedDateTimeMissed, contentImvPriceAreaPostCodesMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"code\"))",
							"            contentCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvPriceAreaPostCodes\"))",
							"            contentImvCapacityPostCodesMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentCodeMissed = contentDisplayNameMissed = contentLastModifiedDateTimeMissed = contentImvCapacityPostCodesMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'code'\"] = !contentCodeMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'imvPriceAreaPostCodes'\"] = !contentImvPriceAreaPostCodesMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvCapacityAreas?%24expand=imvCapacityPostCodes",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvCapacityAreas"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "imvCapacityPostCodes"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AreaCities",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvAreaCities Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentCodeMissed, contentRegionTypeMissed, contentParentCodeMissed, contentDescriptionMissed, contentDescription2Missed, contentLastModifiedDateTimeMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"code\"))",
							"            contentCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"regionType\"))",
							"            contentRegionTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"parentCode\"))",
							"            contentParentCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"description\"))",
							"            contentDescriptionMissed = true;",
							"        if(!param.hasOwnProperty(\"description2\"))",
							"            contentDescription2Missed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentCodeMissed = contentRegionTypeMissed = contentParentCodeMissed = contentDescriptionMissed = contentDescription2Missed = lastDateTimeModified = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'code'\"] = !contentCodeMissed;",
							"tests[\"Body contains 'RegionType'\"] = !contentRegionTypeMissed;",
							"tests[\"Body contains 'ParentCode'\"] = !contentParentCodeMissed;",
							"tests[\"Body contains 'Description'\"] = !contentDescriptionMissed;",
							"tests[\"Body contains 'Description2'\"] = !contentDescription2Missed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentLastModifiedDateTimeMissed;"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvAreaCities",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvAreaCities"
					]
				}
			},
			"response": [
				{
					"name": "AreaCities",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							}
						],
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvAreaCities",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvAreaCities"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "3333"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "41897edc-05ee-4d61-80fb-4f1fef9ce56e"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Thu, 11 Oct 2018 08:32:07 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvAreaCities\",\n    \"value\": [\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk9RQUFBQUFBMTE7MTM3NjEyNDU0NjAwOyc=\\\"\",\n            \"id\": \"6dad52bd-c9df-442f-942c-08c6ee97d298\",\n            \"code\": \"9\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test11111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:32.327Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk5RQUFBQUFBMTE7MTM3NjEyNDU0NDkwOyc=\\\"\",\n            \"id\": \"4ae65a4d-5314-4f85-95c5-35ce7c5d2a17\",\n            \"code\": \"5\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"111111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:29.467Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzQwO3FUWUJBQUNMQUFBQUFBSjdBVE1BQUFBQ2V3TXdBREFBTWdBQUFBQUExMTsxMzc2MzAyODQ2ODA7Jw==\\\"\",\n            \"id\": \"f477ab9c-a579-49e7-b0a5-41f810c2c07f\",\n            \"code\": \"002\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"3\",\n            \"description\": \"Local area\",\n            \"description2\": \"Wide Local area\",\n            \"lastDateTimeModified\": \"2018-10-11T08:17:06.017Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk13QUFBQUFBMTE7MTM3NjEyNDU0NDcwOyc=\\\"\",\n            \"id\": \"f377a517-1f61-4260-a869-427017cc5075\",\n            \"code\": \"3\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test1111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:28.81Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzQwO3FUWUJBQUNMQUFBQUFBSjdBakVBTWdBQUFBSjdBVEVBQUFBQUFBPT0xMTsxMzc2MTI0NTQ0NTA7Jw==\\\"\",\n            \"id\": \"d4f9cddd-7782-4e63-8f83-47c0afa7929c\",\n            \"code\": \"1\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"12\",\n            \"description\": \"test1\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:27.43Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk5BQUFBQUFBMTE7MTM3NjEyNDU0NDgwOyc=\\\"\",\n            \"id\": \"d1de21ba-5340-4424-9c24-69d9351f302b\",\n            \"code\": \"4\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test11111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:29.123Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzQwO3FUWUJBQUNMQVFBQUFBSjdBQUFBQW5zRE1BQXdBREVBQUFBQUFBPT0xMTsxMzc2MzAwMzgzMDA7Jw==\\\"\",\n            \"id\": \"b2cebc00-ddc1-4074-b252-8bc955cb4f65\",\n            \"code\": \"001\",\n            \"regionType\": \"City\",\n            \"parentCode\": \"\",\n            \"description\": \"\",\n            \"description2\": \"Description\",\n            \"lastDateTimeModified\": \"2018-10-10T14:32:29.753Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk9BQUFBQUFBMTE7MTM3NjEyNDU0NzkwOyc=\\\"\",\n            \"id\": \"674b7371-b6cb-40df-a5d1-b10c8c838579\",\n            \"code\": \"8\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:33.107Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk53QUFBQUFBMTE7MTM3NjEyNDU0NTEwOyc=\\\"\",\n            \"id\": \"4a0532ba-d07e-48ab-b2a9-d8a2208761e2\",\n            \"code\": \"7\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test11111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:30.137Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzMyO3FUWUJBQUNMQUFBQUFBSjdBQUFBQW5zQk5nQUFBQUFBMTE7MTM3NjEyNDU0NTAwOyc=\\\"\",\n            \"id\": \"2e5adb88-3047-43ad-ad9e-ef0c9f5dc120\",\n            \"code\": \"6\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"\",\n            \"description\": \"test1111111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:29.81Z\"\n        },\n        {\n            \"@odata.etag\": \"W/\\\"JzQwO3FUWUJBQUNMQUFBQUFBSjdBakVBTWdBQUFBSjdBVElBQUFBQUFBPT0xMTsxMzc2MTI0NTQ0NjA7Jw==\\\"\",\n            \"id\": \"c74327b5-4545-4872-8924-fc1361877aef\",\n            \"code\": \"2\",\n            \"regionType\": \"Area\",\n            \"parentCode\": \"12\",\n            \"description\": \"test111\",\n            \"description2\": \"d2\",\n            \"lastDateTimeModified\": \"2018-10-10T14:04:28.497Z\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "ServicePricePeriods",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvServicePricePeriods Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentServicePricePeriodEntryIDMissed, contentServiceNumberMissed, contentSellingFromStoreMissed, contentSellingToAreaMissed, contentStartDateMissed, contentEndDateMissed, contentBasePriceTypeMissed, contentBasePriceMissed, contentPriceCalculationMethodMissed, contentPriceMissed, contentLastDateTimeModifiedMissed, contentImvServicePriceIntervalsMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"servicePricePeriodEntryID\"))",
							"            contentServicePricePeriodEntryIDMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceNumber\"))",
							"            contentServiceNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"sellingFromStore\"))",
							"            contentSellingFromStoreMissed = true;",
							"        if(!param.hasOwnProperty(\"sellingToArea\"))",
							"            contentSellingToAreaMissed = true;",
							"        if(!param.hasOwnProperty(\"startDate\"))",
							"            contentStartDateMissed = true;   ",
							"        if(!param.hasOwnProperty(\"endDate\"))",
							"            contentEndDateMissed = true;",
							"        if(!param.hasOwnProperty(\"basePriceType\"))",
							"            contentBasePriceTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"basePrice\"))",
							"            contentBasePriceMissed = true;",
							"        if(!param.hasOwnProperty(\"priceCalculationMethod\"))",
							"            contentPriceCalculationMethodMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceNumber\"))",
							"            contentServiceNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"price\"))",
							"            contentPriceMissed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvServicePriceIntervals\"))",
							"            contentImvServicePriceIntervalsMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentServicePricePeriodEntryIDMissed = contentServiceNumberMissed = contentSellingFromStoreMissed = contentSellingToAreaMissed = contentStartDateMissed = contentEndDateMissed = contentBasePriceTypeMissed = contentBasePriceMissed = contentPriceCalculationMethodMissed = contentPriceMissed = contentLastDateTimeModifiedMissed = contentImvServicePriceIntervalsMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'servicePricePeriodEntryID'\"] = !contentServicePricePeriodEntryIDMissed;",
							"tests[\"Body contains 'serviceNumber'\"] = !contentServiceNumberMissed;",
							"tests[\"Body contains 'sellingFromStore'\"] = !contentSellingFromStoreMissed;",
							"tests[\"Body contains 'sellingToArea'\"] = !contentSellingToAreaMissed;",
							"tests[\"Body contains 'startDate'\"] = !contentStartDateMissed;",
							"tests[\"Body contains 'endDate'\"] = !contentEndDateMissed;",
							"tests[\"Body contains 'basePriceType'\"] = !contentBasePriceTypeMissed;",
							"tests[\"Body contains 'basePrice'\"] = !contentBasePriceMissed;",
							"tests[\"Body contains 'priceCalculationMethod'\"] = !contentPriceCalculationMethodMissed;",
							"tests[\"Body contains 'price'\"] = !contentPriceMissed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentLastDateTimeModifiedMissed;",
							"tests[\"Body contains 'imvServicePriceIntervals'\"] = !contentImvServicePriceIntervalsMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvServicePricePeriods?%24expand=imvServicePriceIntervals",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvServicePricePeriods"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "imvServicePriceIntervals"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ServicePriceCalcMethods",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvServicePriceCalcMethods Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentCodeMissed, contentDisplayNameMissed, contentTypeMissed, contentPricedInIntervalsMissed, contentSalesMethodFilterMissed, contentPricingCapacityUnitMissed, contentLastDateTimeModifiedMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"code\"))",
							"            contentCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"type\"))",
							"            contentTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"pricedInIntervals\"))",
							"            contentPricedInIntervalsMissed = true;",
							"        if(!param.hasOwnProperty(\"salesMethodFilter\"))",
							"            contentSalesMethodFilterMissed = true;",
							"        if(!param.hasOwnProperty(\"pricingCapacityUnit\"))",
							"            contentPricingCapacityUnitMissed = true;    ",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentCodeMissed = contentDisplayNameMissed = contentTypeMissed = contentPricedInIntervalsMissed = contentSalesMethodFilterMissed = contentPricingCapacityUnitMissed = contentLastDateTimeModifiedMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'code'\"] = !contentCodeMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'type'\"] = !contentTypeMissed;",
							"tests[\"Body contains 'pricedInIntervals'\"] = !contentPricedInIntervalsMissed;",
							"tests[\"Body contains 'salesMethodFilter'\"] = !contentSalesMethodFilterMissed;",
							"tests[\"Body contains 'pricingCapacityUnit'\"] = !contentPricingCapacityUnitMissed;",
							"tests[\"Body contains 'lastDateTimeModified'\"] = !contentLastDateTimeModifiedMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvServicePriceCalcMethods",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvServicePriceCalcMethods"
					]
				}
			},
			"response": []
		},
		{
			"name": "itemStockLevels",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItemsStockLevel Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentitemNumberMissed, contentstoreMissed, contentlocationMissed, contentsellableStockMissed, contentstockOnPickingLocationMissed, contentLastModifiedDateTimeMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"itemNumber\"))",
							"            contentitemNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"store\"))",
							"            contentstoreMissed = true;",
							"        if(!param.hasOwnProperty(\"location\"))",
							"            contentlocationMissed = true;",
							"        if(!param.hasOwnProperty(\"sellableStock\"))",
							"            contentsellableStockMissed = true;",
							"        if(!param.hasOwnProperty(\"stockOnPickingLocation\"))",
							"            contentstockOnPickingLocationMissed = true;",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentitemNumberMissed = contentstoreMissed = contentlocationMissed = contentsellableStockMissed = contentstockOnPickingLocationMissed = contentLastModifiedDateTimeMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'itemNumber'\"] = !contentitemNumberMissed;",
							"tests[\"Body contains 'store'\"] = !contentstoreMissed;",
							"tests[\"Body contains 'location'\"] = !contentlocationMissed;",
							"tests[\"Body contains 'sellableStock'\"] = !contentsellableStockMissed;",
							"tests[\"Body contains 'stockOnPickingLocation'\"] = !contentstockOnPickingLocationMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItemsStockLevel",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItemsStockLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "ShoppingBags",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItems Entity Automated Tests');",
							"tests[\"Status Code is 201\"] = responseCode.code === 201;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'id'\"] = jsonData.hasOwnProperty(\"id\");",
							"tests[\"Body contains 'customerNumber'\"] = jsonData.hasOwnProperty(\"customerNumber\");",
							"tests[\"Body contains 'currencyCode'\"] = jsonData.hasOwnProperty(\"currencyCode\");",
							"tests[\"Body contains 'imvShoppingBagLines'\"] = jsonData.hasOwnProperty(\"imvShoppingBagLines\");",
							"",
							"var contentDocumentIdMissed, contentSequenceMissed, contentItemIdMissed, contentItemNumberMissed, contentStoreNumberMissed, contentLocationCodeMissed, contentUnitPriceMissed, contentSprItemMissed, contentQtytoCheckMissed, contentQtyinStockMissed, contentAvailbableMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"imvShoppingBagLines\"))",
							"{",
							"    jsonData.imvShoppingBagLines.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"documentId\"))",
							"            contentDocumentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"sequence\"))",
							"            contentSequenceMissed = true;",
							"        if(!param.hasOwnProperty(\"itemId\"))",
							"            contentItemIdMissed = true;",
							"        if(!param.hasOwnProperty(\"itemNumber\"))",
							"            contentItemNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"storeNumber\"))",
							"            contentStoreNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"locationCode\"))",
							"            contentLocationCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPrice\"))",
							"            contentUnitPriceMissed = true;",
							"        if(!param.hasOwnProperty(\"sprItem\"))",
							"            contentSprItemMissed = true;",
							"        if(!param.hasOwnProperty(\"qtytoCheck\"))",
							"            contentQtytoCheckMissed = true;",
							"        if(!param.hasOwnProperty(\"qtyinStock\"))",
							"            contentQtyinStockMissed = true;",
							"        if(!param.hasOwnProperty(\"available\"))",
							"            contentAvailbableMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentDocumentIdMissed = contentSequenceMissed = contentItemIdMissed = contentItemNumberMissed = contentStoreNumberMissed = contentLocationCodeMissed = contentUnitPriceMissed = contentSprItemMissed = contentQtytoCheckMissed = contentQtyinStockMissed = contentAvailbableMissed = true;",
							"}",
							"tests[\"Body contains 'documentId'\"] = !contentDocumentIdMissed;",
							"tests[\"Body contains 'sequence'\"] = !contentSequenceMissed;",
							"tests[\"Body contains 'itemId'\"] = !contentItemIdMissed;",
							"tests[\"Body contains 'itemNumber'\"] = !contentItemNumberMissed;",
							"tests[\"Body contains 'storeNumber'\"] = !contentStoreNumberMissed;",
							"tests[\"Body contains 'locationCode'\"] = !contentLocationCodeMissed;",
							"tests[\"Body contains 'unitPrice'\"] = !contentUnitPriceMissed;",
							"tests[\"Body contains 'sprItem'\"] = !contentSprItemMissed;",
							"tests[\"Body contains 'qtytoCheck'\"] = !contentQtytoCheckMissed;",
							"tests[\"Body contains 'qtyinStock'\"] = !contentQtyinStockMissed;",
							"tests[\"Body contains 'available'\"] = !contentAvailbableMissed;",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"imvShoppingBagLines\": [\r\n\r\n        {\r\n            \"sequence\": 0,\r\n            \"itemId\": \"00000000-0000-0000-0000-000000000000\",\r\n            \"storeNumber\": \"\",\r\n            \"qtytoCheck\": 0\r\n        }\r\n    ]\r\n}\r\n"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvShoppingBags?$expand=imvShoppingBagLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvShoppingBags"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvShoppingBagLines "
						}
					]
				},
				"description": "Show MVXs' Items"
			},
			"response": []
		},
		{
			"name": "ServicePostCodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvPostCodeServiceLinks Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentServiceProductNoMissed, contentCapacityAreaCodeMissed, contentImvServiceCapacityPostCodesMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceProductNo\"))",
							"            contentServiceProductNoMissed = true;",
							"        if(!param.hasOwnProperty(\"capacityAreaCode\"))",
							"            contentCapacityAreaCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvServiceCapacityPostCodes\"))",
							"            contentImvServiceCapacityPostCodesMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentServiceProductNoMissed = contentCapacityAreaCodeMissed = contentImvServiceCapacityPostCodesMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'serviceProductNo'\"] = !contentServiceProductNoMissed;",
							"tests[\"Body contains 'capacityAreaCode'\"] = !contentCapacityAreaCodeMissed;",
							"tests[\"Body contains 'imvServiceCapacityPostCodes'\"] = !contentImvServiceCapacityPostCodesMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvPostCodeServiceLinks/?$expand=imvServiceCapacityPostCodes&$filter=serviceProductNo eq '30000517'",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvPostCodeServiceLinks",
						""
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvServiceCapacityPostCodes"
						},
						{
							"key": "$filter",
							"value": "serviceProductNo eq '30000517'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ServiceStores",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvImvServiceProductStores Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentServiceProductNoMissed, contentCapacityAreaCodeMissed, contentImvServiceProductStoresMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceProductNo\"))",
							"            contentServiceProductNoMissed = true;",
							"        if(!param.hasOwnProperty(\"capacityAreaCode\"))",
							"            contentCapacityAreaCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvServiceProductStores\"))",
							"            contentImvServiceProductStoresMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentServiceProductNoMissed = contentCapacityAreaCodeMissed = contentImvServiceProductStoresMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'serviceProductNo'\"] = !contentServiceProductNoMissed;",
							"tests[\"Body contains 'capacityAreaCode'\"] = !contentCapacityAreaCodeMissed;",
							"tests[\"Body contains 'imvServiceProductStores'\"] = !contentImvServiceProductStoresMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dGVzdHVzZXI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvPostCodeServiceLinks?$expand=imvServiceProductStores($filter=(storeNo eq '235'))",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvPostCodeServiceLinks"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvServiceProductStores($filter=(storeNo eq '235'))"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SalesOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Get imveCommOrders Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'eCommOrderNo'\"] =  param.hasOwnProperty(\"eCommOrderNo\");",
							"        tests[\"Body contains 'orderDate'\"] =  param.hasOwnProperty(\"orderDate\");",
							"        tests[\"Body contains 'orderTime'\"] =  param.hasOwnProperty(\"orderTime\");",
							"        tests[\"Body contains 'storeNo'\"] =  param.hasOwnProperty(\"storeNo\");",
							"        tests[\"Body contains 'eCommCustomerNo'\"] =  param.hasOwnProperty(\"eCommCustomerNo\");",
							"        tests[\"Body contains 'note'\"] =  param.hasOwnProperty(\"note\");",
							"        tests[\"Body contains 'customerLanguage'\"] =  param.hasOwnProperty(\"customerLanguage\");",
							"        tests[\"Body contains 'sellToInformation'\"] =  param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'sellToInformation'\"] = param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'billToInformation'\"] = param.hasOwnProperty(\"billToInformation\");",
							"        tests[\"Body contains 'shipToInformation'\"] = param.hasOwnProperty(\"shipToInformation\");",
							"        tests[\"Body contains 'imveCommOrderLines@odata.context'\"] = param.hasOwnProperty(\"imveCommOrderLines@odata.context\");",
							"        tests[\"Body contains 'imveCommOrderLines'\"] = param.hasOwnProperty(\"imveCommOrderLines\");",
							"        tests[\"Body contains 'imveCommOrderServices@odata.context'\"] = param.hasOwnProperty(\"imveCommOrderServices@odata.context\");",
							"        tests[\"Body contains 'imveCommOrderServices'\"] = param.hasOwnProperty(\"imveCommOrderServices\");",
							"        tests[\"Body contains 'imveCommServiceOrderItems@odata.context'\"] = param.hasOwnProperty(\"imveCommServiceOrderItems@odata.context\");",
							"        tests[\"Body contains 'imveCommServiceOrderItems'\"] = param.hasOwnProperty(\"imveCommServiceOrderItems\");",
							"        tests[\"Body contains 'imveCommPayments@odata.context'\"] = param.hasOwnProperty(\"imveCommPayments@odata.context\");",
							"        tests[\"Body contains 'imveCommPayments'\"] = param.hasOwnProperty(\"imveCommPayments\");",
							"        if (param.hasOwnProperty(\"sellToInformation\"))",
							"        {",
							"            tests[\"sellToInformation contains 'name'\"] = param.sellToInformation.hasOwnProperty(\"name\");",
							"            tests[\"sellToInformation contains 'street'\"] = param.sellToInformation.hasOwnProperty(\"street\");",
							"            tests[\"sellToInformation contains 'city'\"] = param.sellToInformation.hasOwnProperty(\"city\");",
							"            tests[\"sellToInformation contains 'state'\"] = param.sellToInformation.hasOwnProperty(\"state\");",
							"            tests[\"sellToInformation contains 'countryLetterCode'\"] = param.sellToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"sellToInformation contains 'postalCode'\"] = param.sellToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"sellToInformation contains 'email'\"] = param.sellToInformation.hasOwnProperty(\"email\");",
							"            tests[\"sellToInformation contains 'phoneNumber'\"] = param.sellToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"billToInformation\"))",
							"        {",
							"            tests[\"billToInformation contains 'name'\"] = param.billToInformation.hasOwnProperty(\"name\");",
							"            tests[\"billToInformation contains 'street'\"] = param.billToInformation.hasOwnProperty(\"street\");",
							"            tests[\"billToInformation contains 'city'\"] = param.billToInformation.hasOwnProperty(\"city\");",
							"            tests[\"billToInformation contains 'state'\"] = param.billToInformation.hasOwnProperty(\"state\");",
							"            tests[\"billToInformation contains 'countryLetterCode'\"] = param.billToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"billToInformation contains 'postalCode'\"] = param.billToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"billToInformation contains 'email'\"] = param.billToInformation.hasOwnProperty(\"email\");",
							"            tests[\"billToInformation contains 'phoneNumber'\"] = param.billToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"shipToInformation\"))",
							"        {",
							"            tests[\"shipToInformation contains 'name'\"] = param.shipToInformation.hasOwnProperty(\"name\");",
							"            tests[\"shipToInformation contains 'street'\"] = param.shipToInformation.hasOwnProperty(\"street\");",
							"            tests[\"shipToInformation contains 'city'\"] = param.shipToInformation.hasOwnProperty(\"city\");",
							"            tests[\"shipToInformation contains 'state'\"] = param.shipToInformation.hasOwnProperty(\"state\");",
							"            tests[\"shipToInformation contains 'countryLetterCode'\"] = param.shipToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"shipToInformation contains 'postalCode'\"] = param.shipToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"shipToInformation contains 'email'\"] = param.shipToInformation.hasOwnProperty(\"email\");",
							"            tests[\"shipToInformation contains 'phoneNumber'\"] = param.shipToInformation.hasOwnProperty(\"phoneNumber\");",
							"            tests[\"shipToInformation contains 'latitude'\"] = param.shipToInformation.hasOwnProperty(\"latitude\");",
							"            tests[\"shipToInformation contains 'longitude'\"] = param.shipToInformation.hasOwnProperty(\"longitude\");",
							"        }",
							"        if (param.hasOwnProperty(\"imveCommOrderLines\"))",
							"        {",
							"            param.imveCommOrderLines.forEach(function(param){",
							"                tests[\"imveCommOrderLines contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"                tests[\"imveCommOrderLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imveCommOrderLines contains 'lineType'\"] = param.hasOwnProperty(\"lineType\");",
							"                tests[\"imveCommOrderLines contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imveCommOrderLines contains 'displayName'\"] = param.hasOwnProperty(\"displayName\");",
							"                tests[\"imveCommOrderLines contains 'displayNameInLocalLanguage'\"] = param.hasOwnProperty(\"displayNameInLocalLanguage\");",
							"                tests[\"imveCommOrderLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imveCommOrderLines contains 'unitPrice'\"] = param.hasOwnProperty(\"unitPrice\");",
							"                tests[\"imveCommOrderLines contains 'unitPriceIncludingTax'\"] = param.hasOwnProperty(\"unitPriceIncludingTax\");",
							"                tests[\"imveCommOrderLines contains 'taxPercent'\"] = param.hasOwnProperty(\"taxPercent\");",
							"                tests[\"imveCommOrderLines contains 'netAmount'\"] = param.hasOwnProperty(\"netAmount\");",
							"                tests[\"imveCommOrderLines contains 'netAmountIncludingTax'\"] = param.hasOwnProperty(\"netAmountIncludingTax\");",
							"                tests[\"imveCommOrderLines contains 'note'\"] = param.hasOwnProperty(\"note\");",
							"            })",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"imveCommOrderServices\"))",
							"        {",
							"            param.imveCommOrderServices.forEach(function(param){",
							"                tests[\"imveCommOrderServices contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"                tests[\"imveCommOrderServices contains 'reservationID'\"] = param.hasOwnProperty(\"reservationID\");",
							"                tests[\"imveCommOrderServices contains 'serviceProductNo'\"] = param.hasOwnProperty(\"serviceProductNo\");",
							"                tests[\"imveCommOrderServices contains 'timeslotNo'\"] = param.hasOwnProperty(\"timeslotNo\");",
							"                tests[\"imveCommOrderServices contains 'price'\"] = param.hasOwnProperty(\"price\");",
							"                tests[\"imveCommOrderServices contains 'priceIncludingTax'\"] = param.hasOwnProperty(\"priceIncludingTax\");",
							"                tests[\"imveCommOrderServices contains 'priceCalcMethod'\"] = param.hasOwnProperty(\"priceCalcMethod\");",
							"                tests[\"imveCommOrderServices contains 'date'\"] = param.hasOwnProperty(\"date\");",
							"                tests[\"imveCommOrderServices contains 'starttime'\"] = param.hasOwnProperty(\"starttime\");",
							"                tests[\"imveCommOrderServices contains 'endtime'\"] = param.hasOwnProperty(\"endtime\");",
							"                tests[\"imveCommOrderServices contains 'capacityunit'\"] = param.hasOwnProperty(\"capacityunit\");",
							"                tests[\"imveCommOrderServices contains 'capacity'\"] = param.hasOwnProperty(\"capacity\");",
							"                tests[\"imveCommOrderServices contains 'serviceProviderNo'\"] = param.hasOwnProperty(\"serviceProviderNo\");",
							"            })",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"imveCommServiceOrderItems\"))",
							"        {",
							"            param.imveCommServiceOrderItems.forEach(function(param){",
							"                tests[\"imveCommServiceOrderItems contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"                tests[\"imveCommServiceOrderItems contains 'reservationID'\"] = param.hasOwnProperty(\"reservationID\");",
							"                tests[\"imveCommServiceOrderItems contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imveCommServiceOrderItems contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imveCommServiceOrderItems contains 'relatedItemSequenceNo'\"] = param.hasOwnProperty(\"relatedItemSequenceNo\");",
							"            })",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"imveCommPayments\"))",
							"        {",
							"            param.imveCommPayments.forEach(function(param){",
							"                tests[\"imveCommPayments contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"                tests[\"imveCommPayments contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imveCommPayments contains 'referenceId'\"] = param.hasOwnProperty(\"referenceId\");",
							"                tests[\"imveCommPayments contains 'date'\"] = param.hasOwnProperty(\"date\");",
							"                tests[\"imveCommPayments contains 'type'\"] = param.hasOwnProperty(\"type\");",
							"                tests[\"imveCommPayments contains 'currencyCode'\"] = param.hasOwnProperty(\"currencyCode\");",
							"                tests[\"imveCommPayments contains 'amount'\"] = param.hasOwnProperty(\"amount\");",
							"                tests[\"imveCommPayments contains 'document'\"] = param.hasOwnProperty(\"document\");",
							"            })",
							"        }",
							"    })",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imveCommOrders?$expand=imveCommOrderLines,imveCommOrderServices,imveCommServiceOrderItems,imveCommPayments",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imveCommOrders"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imveCommOrderLines,imveCommOrderServices,imveCommServiceOrderItems,imveCommPayments"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SalesOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imveCommOrders Entity Automated Tests');",
							"tests[\"Status Code is 201\"] = responseCode.code === 201;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'id'\"] = jsonData.hasOwnProperty(\"id\");",
							"tests[\"Body contains 'eCommOrderNo'\"] = jsonData.hasOwnProperty(\"eCommOrderNo\");",
							"tests[\"Body contains 'orderDate'\"] = jsonData.hasOwnProperty(\"orderDate\");",
							"tests[\"Body contains 'orderTime'\"] = jsonData.hasOwnProperty(\"orderTime\");",
							"tests[\"Body contains 'storeNo'\"] = jsonData.hasOwnProperty(\"storeNo\");",
							"tests[\"Body contains 'eCommCustomerNo'\"] = jsonData.hasOwnProperty(\"eCommCustomerNo\");",
							"tests[\"Body contains 'note'\"] = jsonData.hasOwnProperty(\"note\");",
							"tests[\"Body contains 'customerLanguage'\"] = jsonData.hasOwnProperty(\"customerLanguage\");",
							"tests[\"Body contains 'sellToInformation'\"] = jsonData.hasOwnProperty(\"sellToInformation\");",
							"tests[\"Body contains 'billToInformation'\"] = jsonData.hasOwnProperty(\"billToInformation\");",
							"tests[\"Body contains 'shipToInformation'\"] = jsonData.hasOwnProperty(\"shipToInformation\");",
							"tests[\"Body contains 'imveCommOrderLines'\"] = jsonData.hasOwnProperty(\"imveCommOrderLines\");",
							"tests[\"Body contains 'imveCommOrderServices'\"] = jsonData.hasOwnProperty(\"imveCommOrderServices\");",
							"tests[\"Body contains 'imveCommPayments'\"] = jsonData.hasOwnProperty(\"imveCommPayments\");",
							"",
							"if (jsonData.hasOwnProperty(\"id\"))",
							"{",
							"    var id = jsonData.Id;",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"sellToInformation\"))",
							"{",
							"    tests[\"Body contains 'name'\"] = jsonData.sellToInformation.hasOwnProperty(\"name\");",
							"    tests[\"Body contains 'street'\"] = jsonData.sellToInformation.hasOwnProperty(\"street\");",
							"    tests[\"Body contains 'city'\"] = jsonData.sellToInformation.hasOwnProperty(\"city\");",
							"    tests[\"Body contains 'state'\"] = jsonData.sellToInformation.hasOwnProperty(\"state\");",
							"    tests[\"Body contains 'countryLetterCode'\"] = jsonData.sellToInformation.hasOwnProperty(\"countryLetterCode\");",
							"    tests[\"Body contains 'postalCode'\"] = jsonData.sellToInformation.hasOwnProperty(\"postalCode\");",
							"    tests[\"Body contains 'email'\"] = jsonData.sellToInformation.hasOwnProperty(\"email\");",
							"    tests[\"Body contains 'phoneNumber'\"] = jsonData.sellToInformation.hasOwnProperty(\"phoneNumber\");",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"billToInformation\"))",
							"{",
							"    tests[\"Body contains 'name'\"] = jsonData.billToInformation.hasOwnProperty(\"name\");",
							"    tests[\"Body contains 'street'\"] = jsonData.billToInformation.hasOwnProperty(\"street\");",
							"    tests[\"Body contains 'city'\"] = jsonData.billToInformation.hasOwnProperty(\"city\");",
							"    tests[\"Body contains 'state'\"] = jsonData.billToInformation.hasOwnProperty(\"state\");",
							"    tests[\"Body contains 'countryLetterCode'\"] = jsonData.billToInformation.hasOwnProperty(\"countryLetterCode\");",
							"    tests[\"Body contains 'postalCode'\"] = jsonData.billToInformation.hasOwnProperty(\"postalCode\");",
							"    tests[\"Body contains 'email'\"] = jsonData.billToInformation.hasOwnProperty(\"email\");",
							"    tests[\"Body contains 'phoneNumber'\"] = jsonData.billToInformation.hasOwnProperty(\"phoneNumber\");",
							"    tests[\"Body contains 'name'\"] = jsonData.billToInformation.hasOwnProperty(\"name\");",
							"    tests[\"Body contains 'name'\"] = jsonData.billToInformation.hasOwnProperty(\"name\");",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"shipToInformation\"))",
							"{",
							"    tests[\"Body contains 'name'\"] = jsonData.shipToInformation.hasOwnProperty(\"name\");",
							"    tests[\"Body contains 'street'\"] = jsonData.shipToInformation.hasOwnProperty(\"street\");",
							"    tests[\"Body contains 'city'\"] = jsonData.shipToInformation.hasOwnProperty(\"city\");",
							"    tests[\"Body contains 'state'\"] = jsonData.shipToInformation.hasOwnProperty(\"state\");",
							"    tests[\"Body contains 'countryLetterCode'\"] = jsonData.shipToInformation.hasOwnProperty(\"countryLetterCode\");",
							"    tests[\"Body contains 'postalCode'\"] = jsonData.shipToInformation.hasOwnProperty(\"postalCode\");",
							"    tests[\"Body contains 'email'\"] = jsonData.shipToInformation.hasOwnProperty(\"email\");",
							"    tests[\"Body contains 'phoneNumber'\"] = jsonData.shipToInformation.hasOwnProperty(\"phoneNumber\");",
							"    tests[\"Body contains 'latitude'\"] = jsonData.shipToInformation.hasOwnProperty(\"latitude\");",
							"    tests[\"Body contains 'longitude'\"] = jsonData.shipToInformation.hasOwnProperty(\"longitude\");",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"imveCommOrderLines\"))",
							"{",
							"    jsonData.imveCommOrderLines.forEach(function(param){",
							"        tests[\"Body contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"        tests[\"Ids are the same\"] = id === param.documentId;",
							"        tests[\"Body contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"        tests[\"Body contains 'lineType'\"] = param.hasOwnProperty(\"lineType\");",
							"        tests[\"Body contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"        tests[\"Body contains 'manualSPRExpansion'\"] = param.hasOwnProperty(\"manualSPRExpansion\");",
							"        tests[\"Body contains 'displayName'\"] = param.hasOwnProperty(\"displayName\");",
							"        tests[\"Body contains 'displayNameInLocalLanguage'\"] = param.hasOwnProperty(\"displayNameInLocalLanguage\");",
							"        tests[\"Body contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"        tests[\"Body contains 'unitPrice'\"] = param.hasOwnProperty(\"unitPrice\");",
							"        tests[\"Body contains 'unitPriceIncludingTax'\"] = param.hasOwnProperty(\"unitPriceIncludingTax\");",
							"        tests[\"Body contains 'taxPercent'\"] = param.hasOwnProperty(\"taxPercent\");",
							"        tests[\"Body contains 'netAmount'\"] = param.hasOwnProperty(\"netAmount\");",
							"        tests[\"Body contains 'netAmountIncludingTax'\"] = param.hasOwnProperty(\"netAmountIncludingTax\");",
							"        tests[\"Body contains 'belongsToSequence'\"] = param.hasOwnProperty(\"belongsToSequence\");",
							"        tests[\"Body contains 'note'\"] = param.hasOwnProperty(\"note\");",
							"    })",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"imveCommOrderServices\"))",
							"{",
							"    jsonData.imveCommOrderServices.forEach(function(param){",
							"        tests[\"Body contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"        tests[\"Ids are the same\"] = id === param.documentId;",
							"        tests[\"Body contains 'reservationID'\"] = param.hasOwnProperty(\"reservationID\");",
							"        tests[\"Body contains 'serviceProductNo'\"] = param.hasOwnProperty(\"serviceProductNo\");",
							"        tests[\"Body contains 'timeslotNo'\"] = param.hasOwnProperty(\"timeslotNo\");",
							"        tests[\"Body contains 'price'\"] = param.hasOwnProperty(\"price\");",
							"        tests[\"Body contains 'priceIncludingTax'\"] = param.hasOwnProperty(\"priceIncludingTax\");",
							"        tests[\"Body contains 'priceCalcMethod'\"] = param.hasOwnProperty(\"priceCalcMethod\");",
							"        tests[\"Body contains 'date'\"] = param.hasOwnProperty(\"date\");",
							"        tests[\"Body contains 'starttime'\"] = param.hasOwnProperty(\"starttime\");",
							"        tests[\"Body contains 'endtime'\"] = param.hasOwnProperty(\"endtime\");",
							"        tests[\"Body contains 'capacityunit'\"] = param.hasOwnProperty(\"capacityunit\");",
							"        tests[\"Body contains 'capacity'\"] = param.hasOwnProperty(\"capacity\");",
							"        tests[\"Body contains 'serviceProviderNo'\"] = param.hasOwnProperty(\"serviceProviderNo\");",
							"    })",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"imveCommServiceOrderItems\"))",
							"{",
							"    jsonData.imveCommServiceOrderItems.forEach(function(param){",
							"        tests[\"Body contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"        tests[\"Ids are the same\"] = id === param.documentId;",
							"        tests[\"Body contains 'reservationID'\"] = param.hasOwnProperty(\"reservationID\");",
							"        tests[\"Body contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"        tests[\"Body contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"        tests[\"Body contains 'relatedItemSequenceNo'\"] = param.hasOwnProperty(\"relatedItemSequenceNo\");",
							"    })",
							"}",
							"",
							"if (jsonData.hasOwnProperty(\"imveCommPayments\"))",
							"{",
							"    jsonData.imveCommPayments.forEach(function(param){",
							"        tests[\"Body contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"        tests[\"Ids are the same\"] = id === param.documentId;",
							"        tests[\"Body contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"        tests[\"Body contains 'referenceId'\"] = param.hasOwnProperty(\"referenceId\");",
							"        tests[\"Body contains 'date'\"] = param.hasOwnProperty(\"date\");",
							"        tests[\"Body contains 'type'\"] = param.hasOwnProperty(\"type\");",
							"        tests[\"Body contains 'currencyCode'\"] = param.hasOwnProperty(\"currencyCode\");",
							"        tests[\"Body contains 'amount'\"] = param.hasOwnProperty(\"amount\");",
							"        tests[\"Body contains 'document'\"] = param.hasOwnProperty(\"document\");",
							"    })",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\t\"eCommOrderNo\": \"IRW80951\",\r\t\"orderDate\": \"2018-08-29\",\r\t\"orderTime\": \"11:52:34\",\r\t\"storeNo\": \"235\",\r\t\"eCommCustomerNo\": \"VR\",\r\t\"sellToInformation\": {\r    \t\"name\": \"Jens Johnsson\",\r    \t\"name2\": \"Mr\",\r    \t\"street\": \"WayToShip 100\",\r    \t\"street2\": \"-\",\r    \t\"city\": \"Manama\",\r    \t\"postalCode\": \"1000\",\r    \t\"state\": \"Lithuania\",\r    \t\"countryLetterCode\": \"LT\",\r    \t\"phoneNumber\": \"1234\",\r    \t\"email\": \"someone@nowhere.net\"\r\t},\r\t\"billToInformation\": {\r    \t\"name\": \"Jens Johnsson2\",\r    \t\"name2\": \"Mr&Mrs \\\"Smith\\\"\",\r    \t\"street\": \"WayToShip 1002\",\r    \t\"street2\": \"-\",\r    \t\"city\": \"Manama\",\r    \t\"postalCode\": \"1000\",\r    \t\"state\": \"LT\",\r    \t\"countryLetterCode\": \"LT\",\r    \t\"phoneNumber\": \"2345\",\r    \t\"email\": \"someone2@nowhere.net\"\r\t},\r\t\"shipToInformation\": {\r    \t\"name\": \"Jens Johnsson3\",\r    \t\"name2\": \"Mr3\",\r    \t\"street\": \"WayToShip 1003\",\r    \t\"street2\": \"-\",\r    \t\"city\": \"Manama\",\r    \t\"postalCode\": \"1000\",\r    \t\"state\": \"LT\",\r    \t\"countryLetterCode\": \"LT\",\r    \t\"phoneNumber\": \"3456\",\r    \t\"email\": \"someone3@nowhere.net\",\r    \t\"latitude\": 4.4071,\r    \t\"longitude\": 52.0516\r\t},\r\t\"note\": \"PrintComment xml Order\",\r\t\"customerLanguage\": \"EN\",\r\t\"imveCommOrderLines\": [\r    \t{\r    \t\t\"sequence\": 1,\r    \t\t\"lineType\": \"Item\",\r    \t\t\"number\": \"20205449\",\r    \t\t\"displayName\": \"(The best used item ever) HAGGEBY DOOR 60X60 WHITE\",\r    \t\t\"displayNameInLocalLanguage\": \"very 'Local\\\" description\",\r    \t\t\"quantity\": 3.0,\r    \t\t\"unitPrice\": 5.78512,\r    \t\t\"unitPriceIncludingTax\": 7.0,\r    \t\t\"netAmount\": 17.36,\r    \t\t\"netAmountIncludingTax\": 21.0,\r    \t\t\"note\": \"bebeb\\\"\\/\\\\12345\"\r    \t},\r    \t{\r    \t\t\"sequence\": 2,\r    \t\t\"lineType\": \"SPR\",\r    \t\t\"number\": \"89041709\",\r    \t\t\"displayName\": \"ANTILOP N HIGHCHR W SAFETY BELT WHI\\/SILVER-COLOUR\",\r    \t\t\"displayNameInLocalLanguage\": \"ANTILOP N DESCR. 2\",\r    \t\t\"quantity\": 2.0,\r    \t\t\"unitPrice\": 8.2562,\r    \t\t\"unitPriceIncludingTax\": 9.99,\r    \t\t\"netAmount\": 16.51,\r    \t\t\"netAmountIncludingTax\": 19.98,\r    \t\t\"note\": \"\"\r    \t},\r    \t{\r    \t\t\"sequence\": 3,\r    \t\t\"lineType\": \"Item\",\r    \t\t\"number\": \"20228766\",\r    \t\t\"displayName\": \"TUTEMO WLL CB 40X37X20 WHITE\\/GREY\",\r    \t\t\"displayNameInLocalLanguage\": \"\",\r    \t\t\"quantity\": 1.0,\r    \t\t\"unitPrice\": 22.0,\r    \t\t\"unitPriceIncludingTax\": 22.0,\r    \t\t\"netAmount\": 22.0,\r    \t\t\"netAmountIncludingTax\": 22.0,\r    \t\t\"note\": \"\"\r    \t}\r\t],\r\t\"imveCommOrderServices\": [\r    \t{\r    \t\t\"serviceProviderNo\": \"SERVPROV1500005\",\r    \t\t\"serviceProductNo\": \"40000362\",\r    \t\t\"timeslotNo\": 11019,\r    \t\t\"reservationID\": 80951,\r    \t\t\"price\": 20.66,\r    \t\t\"priceIncludingTax\": 25.0,\r    \t\t\"priceCalcMethod\": \"MANUAL\",\r    \t\t\"bookedDays\": 1,\r    \t\t\"multiSlot\": false,\r    \t\t\"date\": \"2018-09-01\",\r    \t\t\"starttime\": \"10:00:00\",\r    \t\t\"endtime\": \"17:00:00\",\r    \t\t\"capacityunit\": \"TRANSPORT\",\r    \t\t\"capacity\": 1.0\r    \t},\r    \t{\r    \t\t\"serviceProviderNo\": \"SERVPROV1500010\",\r    \t\t\"serviceProductNo\": \"20000532\",\r    \t\t\"timeslotNo\": 12000,\r    \t\t\"reservationID\": 80952,\r    \t\t\"price\": 65.22,\r    \t\t\"priceIncludingTax\": 75.0,\r    \t\t\"priceCalcMethod\": \"FIXED\",\r    \t\t\"bookedDays\": 1,\r    \t\t\"multiSlot\": false,\r    \t\t\"date\": \"2018-09-01\",\r    \t\t\"starttime\": \"10:00:00\",\r    \t\t\"endtime\": \"17:00:00\",\r    \t\t\"capacityunit\": \"M\",\r    \t\t\"capacity\": 1.0\r    \t},\r    \t{\r    \t\t\"serviceProviderNo\": \"SERVPROV1500011\",\r    \t\t\"serviceProductNo\": \"00000137\",\r    \t\t\"timeslotNo\": 14000,\r    \t\t\"reservationID\": 80953,\r    \t\t\"price\": 18.18,\r    \t\t\"priceIncludingTax\": 20.0,\r    \t\t\"priceCalcMethod\": \"FIXED\",\r    \t\t\"bookedDays\": 1,\r    \t\t\"multiSlot\": false,\r    \t\t\"date\": \"2018-09-01\",\r    \t\t\"starttime\": \"10:00:00\",\r    \t\t\"endtime\": \"17:09:00\",\r    \t\t\"capacityunit\": \"Service\",\r    \t\t\"capacity\": 1.0\r    \t}\r\t],\r\t\"imveCommServiceOrderItems\": [\r    \t{\r    \t\t\"sequence\": 1,\r    \t\t\"relatedItemSequenceNo\": 1,\r    \t\t\"reservationID\": 80951,\r    \t\t\"quantity\": 3\r    \t},\r    \t{\r    \t\t\"sequence\": 2,\r    \t\t\"relatedItemSequenceNo\": 2,\r    \t\t\"reservationID\": 80951,\r    \t\t\"quantity\": 2\r    \t},\r    \t{\r    \t\t\"sequence\": 3,\r    \t\t\"relatedItemSequenceNo\": 3,\r    \t\t\"reservationID\": 80951,\r    \t\t\"quantity\": 1\r    \t},\r    \t{\r    \t\t\"sequence\": 4,\r    \t\t\"relatedItemSequenceNo\": 1,\r    \t\t\"reservationID\": 80952,\r    \t\t\"quantity\": 3\r    \t}\r\t],\r\t\"imveCommPayments\": [\r    \t{\r    \t\t\"sequence\": 1,\r    \t\t\"referenceId\": \"abcdefghijklmnopqrstuvwxyz\",\r    \t\t\"date\": \"2018-08-23T11:20:00Z\",\r    \t\t\"type\": \"01\",\r    \t\t\"currencyCode\": \"EUR\",\r    \t\t\"amount\": 182.98,\r    \t\t\"document\": \"WEB0000123\"\r    \t}\r\t]\r}\r"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imveCommOrders?%24expand=imveCommOrderLines,imveCommOrderServices,imveCommServiceOrderItems,imveCommPayments",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imveCommOrders"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "imveCommOrderLines,imveCommOrderServices,imveCommServiceOrderItems,imveCommPayments"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SalesOrderCancellation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6b64733-4717-4fa0-9491-e72e78906e76",
						"exec": [
							"console.log('cancelEcomOrder Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imveCommOrders(8b0df077-5a28-4ec0-8ed2-54b597b27a94)/Microsoft.NAV.cancelEcomOrder",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imveCommOrders(8b0df077-5a28-4ec0-8ed2-54b597b27a94)",
						"Microsoft.NAV.cancelEcomOrder"
					]
				}
			},
			"response": []
		},
		{
			"name": "AfterSalesOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Get imvAfterSalesOrders Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'eCommOrderNo'\"] =  param.hasOwnProperty(\"eCommOrderNo\");",
							"        tests[\"Body contains 'storeNo'\"] =  param.hasOwnProperty(\"storeNo\");",
							"        tests[\"Body contains 'eCommCustomerNo'\"] =  param.hasOwnProperty(\"eCommCustomerNo\");",
							"        tests[\"Body contains 'note'\"] =  param.hasOwnProperty(\"note\");",
							"        tests[\"Body contains 'sellToInformation'\"] =  param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'sellToInformation'\"] = param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'billToInformation'\"] = param.hasOwnProperty(\"billToInformation\");",
							"        tests[\"Body contains 'shipToInformation'\"] = param.hasOwnProperty(\"shipToInformation\");",
							"        tests[\"Body contains 'imvAfterSalesOrderLines@odata.context'\"] = param.hasOwnProperty(\"imvAfterSalesOrderLines@odata.context\");",
							"        tests[\"Body contains 'imvAfterSalesOrderLines'\"] = param.hasOwnProperty(\"imvAfterSalesOrderLines\");",
							"        if (param.hasOwnProperty(\"sellToInformation\"))",
							"        {",
							"            tests[\"sellToInformation contains 'name'\"] = param.sellToInformation.hasOwnProperty(\"name\");",
							"            tests[\"sellToInformation contains 'street'\"] = param.sellToInformation.hasOwnProperty(\"street\");",
							"            tests[\"sellToInformation contains 'city'\"] = param.sellToInformation.hasOwnProperty(\"city\");",
							"            tests[\"sellToInformation contains 'state'\"] = param.sellToInformation.hasOwnProperty(\"state\");",
							"            tests[\"sellToInformation contains 'countryLetterCode'\"] = param.sellToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"sellToInformation contains 'postalCode'\"] = param.sellToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"sellToInformation contains 'email'\"] = param.sellToInformation.hasOwnProperty(\"email\");",
							"            tests[\"sellToInformation contains 'phoneNumber'\"] = param.sellToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"billToInformation\"))",
							"        {",
							"            tests[\"billToInformation contains 'name'\"] = param.billToInformation.hasOwnProperty(\"name\");",
							"            tests[\"billToInformation contains 'street'\"] = param.billToInformation.hasOwnProperty(\"street\");",
							"            tests[\"billToInformation contains 'city'\"] = param.billToInformation.hasOwnProperty(\"city\");",
							"            tests[\"billToInformation contains 'state'\"] = param.billToInformation.hasOwnProperty(\"state\");",
							"            tests[\"billToInformation contains 'countryLetterCode'\"] = param.billToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"billToInformation contains 'postalCode'\"] = param.billToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"billToInformation contains 'email'\"] = param.billToInformation.hasOwnProperty(\"email\");",
							"            tests[\"billToInformation contains 'phoneNumber'\"] = param.billToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"shipToInformation\"))",
							"        {",
							"            tests[\"shipToInformation contains 'name'\"] = param.shipToInformation.hasOwnProperty(\"name\");",
							"            tests[\"shipToInformation contains 'street'\"] = param.shipToInformation.hasOwnProperty(\"street\");",
							"            tests[\"shipToInformation contains 'city'\"] = param.shipToInformation.hasOwnProperty(\"city\");",
							"            tests[\"shipToInformation contains 'state'\"] = param.shipToInformation.hasOwnProperty(\"state\");",
							"            tests[\"shipToInformation contains 'countryLetterCode'\"] = param.shipToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"shipToInformation contains 'postalCode'\"] = param.shipToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"shipToInformation contains 'email'\"] = param.shipToInformation.hasOwnProperty(\"email\");",
							"            tests[\"shipToInformation contains 'phoneNumber'\"] = param.shipToInformation.hasOwnProperty(\"phoneNumber\");",
							"            tests[\"shipToInformation contains 'latitude'\"] = param.shipToInformation.hasOwnProperty(\"latitude\");",
							"            tests[\"shipToInformation contains 'longitude'\"] = param.shipToInformation.hasOwnProperty(\"longitude\");",
							"        }",
							"        if (param.hasOwnProperty(\"imvAfterSalesOrderLines\"))",
							"        {",
							"            param.imvAfterSalesOrderLines.forEach(function(param){",
							"                tests[\"imvAfterSalesOrderLines contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"                tests[\"imvAfterSalesOrderLines contains 'documentNumber'\"] = param.hasOwnProperty(\"documentNumber\");",
							"                tests[\"imvAfterSalesOrderLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imvAfterSalesOrderLines contains 'lineType'\"] = param.hasOwnProperty(\"lineType\");",
							"                tests[\"imvAfterSalesOrderLines contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvAfterSalesOrderLines contains 'displayName'\"] = param.hasOwnProperty(\"displayName\");",
							"                tests[\"imvAfterSalesOrderLines contains 'displayNameInLocalLanguage'\"] = param.hasOwnProperty(\"displayNameInLocalLanguage\");",
							"                tests[\"imvAfterSalesOrderLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imvAfterSalesOrderLines contains 'unitPrice'\"] = param.hasOwnProperty(\"unitPrice\");",
							"                tests[\"imvAfterSalesOrderLines contains 'unitPriceIncludingTax'\"] = param.hasOwnProperty(\"unitPriceIncludingTax\");",
							"                tests[\"imvAfterSalesOrderLines contains 'taxPercent'\"] = param.hasOwnProperty(\"taxPercent\");",
							"                tests[\"imvAfterSalesOrderLines contains 'netAmount'\"] = param.hasOwnProperty(\"netAmount\");",
							"                tests[\"imvAfterSalesOrderLines contains 'netAmountIncludingTax'\"] = param.hasOwnProperty(\"netAmountIncludingTax\");",
							"            })",
							"        }",
							"    })",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvAfterSalesOrders?$expand=imvAfterSalesOrderLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvAfterSalesOrders"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvAfterSalesOrderLines"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReturnOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Get imvSalesReturnOrders Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'eCommOrderNo'\"] =  param.hasOwnProperty(\"eCommOrderNo\");",
							"        tests[\"Body contains 'storeNo'\"] =  param.hasOwnProperty(\"storeNo\");",
							"        tests[\"Body contains 'eCommCustomerNo'\"] =  param.hasOwnProperty(\"eCommCustomerNo\");",
							"        tests[\"Body contains 'note'\"] =  param.hasOwnProperty(\"note\");",
							"        tests[\"Body contains 'sellToInformation'\"] =  param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'sellToInformation'\"] = param.hasOwnProperty(\"sellToInformation\");",
							"        tests[\"Body contains 'billToInformation'\"] = param.hasOwnProperty(\"billToInformation\");",
							"        tests[\"Body contains 'shipToInformation'\"] = param.hasOwnProperty(\"shipToInformation\");",
							"        tests[\"Body contains 'imvSalesReturnOrderLines@odata.context'\"] = param.hasOwnProperty(\"imvSalesReturnOrderLines@odata.context\");",
							"        tests[\"Body contains 'imvSalesReturnOrderLines'\"] = param.hasOwnProperty(\"imvSalesReturnOrderLines\");",
							"        if (param.hasOwnProperty(\"sellToInformation\"))",
							"        {",
							"            tests[\"sellToInformation contains 'name'\"] = param.sellToInformation.hasOwnProperty(\"name\");",
							"            tests[\"sellToInformation contains 'street'\"] = param.sellToInformation.hasOwnProperty(\"street\");",
							"            tests[\"sellToInformation contains 'city'\"] = param.sellToInformation.hasOwnProperty(\"city\");",
							"            tests[\"sellToInformation contains 'state'\"] = param.sellToInformation.hasOwnProperty(\"state\");",
							"            tests[\"sellToInformation contains 'countryLetterCode'\"] = param.sellToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"sellToInformation contains 'postalCode'\"] = param.sellToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"sellToInformation contains 'email'\"] = param.sellToInformation.hasOwnProperty(\"email\");",
							"            tests[\"sellToInformation contains 'phoneNumber'\"] = param.sellToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"billToInformation\"))",
							"        {",
							"            tests[\"billToInformation contains 'name'\"] = param.billToInformation.hasOwnProperty(\"name\");",
							"            tests[\"billToInformation contains 'street'\"] = param.billToInformation.hasOwnProperty(\"street\");",
							"            tests[\"billToInformation contains 'city'\"] = param.billToInformation.hasOwnProperty(\"city\");",
							"            tests[\"billToInformation contains 'state'\"] = param.billToInformation.hasOwnProperty(\"state\");",
							"            tests[\"billToInformation contains 'countryLetterCode'\"] = param.billToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"billToInformation contains 'postalCode'\"] = param.billToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"billToInformation contains 'email'\"] = param.billToInformation.hasOwnProperty(\"email\");",
							"            tests[\"billToInformation contains 'phoneNumber'\"] = param.billToInformation.hasOwnProperty(\"phoneNumber\");",
							"        }",
							"        ",
							"        if (param.hasOwnProperty(\"shipToInformation\"))",
							"        {",
							"            tests[\"shipToInformation contains 'name'\"] = param.shipToInformation.hasOwnProperty(\"name\");",
							"            tests[\"shipToInformation contains 'street'\"] = param.shipToInformation.hasOwnProperty(\"street\");",
							"            tests[\"shipToInformation contains 'city'\"] = param.shipToInformation.hasOwnProperty(\"city\");",
							"            tests[\"shipToInformation contains 'state'\"] = param.shipToInformation.hasOwnProperty(\"state\");",
							"            tests[\"shipToInformation contains 'countryLetterCode'\"] = param.shipToInformation.hasOwnProperty(\"countryLetterCode\");",
							"            tests[\"shipToInformation contains 'postalCode'\"] = param.shipToInformation.hasOwnProperty(\"postalCode\");",
							"            tests[\"shipToInformation contains 'email'\"] = param.shipToInformation.hasOwnProperty(\"email\");",
							"            tests[\"shipToInformation contains 'phoneNumber'\"] = param.shipToInformation.hasOwnProperty(\"phoneNumber\");",
							"            tests[\"shipToInformation contains 'latitude'\"] = param.shipToInformation.hasOwnProperty(\"latitude\");",
							"            tests[\"shipToInformation contains 'longitude'\"] = param.shipToInformation.hasOwnProperty(\"longitude\");",
							"        }",
							"        if (param.hasOwnProperty(\"imvSalesReturnOrderLines\"))",
							"        {",
							"            param.imvSalesReturnOrderLines.forEach(function(param){",
							"                tests[\"imvSalesReturnOrderLines contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"                tests[\"imvSalesReturnOrderLines contains 'documentNumber'\"] = param.hasOwnProperty(\"documentNumber\");",
							"                tests[\"imvSalesReturnOrderLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imvSalesReturnOrderLines contains 'lineType'\"] = param.hasOwnProperty(\"lineType\");",
							"                tests[\"imvSalesReturnOrderLines contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvSalesReturnOrderLines contains 'displayName'\"] = param.hasOwnProperty(\"displayName\");",
							"                tests[\"imvSalesReturnOrderLines contains 'displayNameInLocalLanguage'\"] = param.hasOwnProperty(\"displayNameInLocalLanguage\");",
							"                tests[\"imvSalesReturnOrderLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imvSalesReturnOrderLines contains 'unitPrice'\"] = param.hasOwnProperty(\"unitPrice\");",
							"                tests[\"imvSalesReturnOrderLines contains 'unitPriceIncludingTax'\"] = param.hasOwnProperty(\"unitPriceIncludingTax\");",
							"                tests[\"imvSalesReturnOrderLines contains 'taxPercent'\"] = param.hasOwnProperty(\"taxPercent\");",
							"                tests[\"imvSalesReturnOrderLines contains 'netAmount'\"] = param.hasOwnProperty(\"netAmount\");",
							"                tests[\"imvSalesReturnOrderLines contains 'netAmountIncludingTax'\"] = param.hasOwnProperty(\"netAmountIncludingTax\");",
							"            })",
							"        }",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvSalesReturnOrders?$expand=imvSalesReturnOrderLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvSalesReturnOrders"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvSalesReturnOrderLines"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EcomInvoices",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Get imvEcomInvoices Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'documentId'\"] =  param.hasOwnProperty(\"documentId\");",
							"        tests[\"Body contains 'eCommOrderNo'\"] =  param.hasOwnProperty(\"eCommOrderNo\");",
							"        tests[\"Body contains 'transactionNumber'\"] =  param.hasOwnProperty(\"transactionNumber\");",
							"        tests[\"Body contains 'receiptNumber'\"] =  param.hasOwnProperty(\"receiptNumber\");",
							"        tests[\"Body contains 'date'\"] =  param.hasOwnProperty(\"date\");",
							"        tests[\"Body contains 'time'\"] =  param.hasOwnProperty(\"time\");",
							"        tests[\"Body contains 'customerNumber'\"] = param.hasOwnProperty(\"customerNumber\");",
							"        tests[\"Body contains 'netAmount'\"] = param.hasOwnProperty(\"netAmount\");",
							"        tests[\"Body contains 'grossAmount'\"] = param.hasOwnProperty(\"grossAmount\");",
							"        tests[\"Body contains 'payment'\"] = param.hasOwnProperty(\"payment\");",
							"        tests[\"Body contains 'numberOfItems'\"] = param.hasOwnProperty(\"numberOfItems\");",
							"        tests[\"Body contains 'imvEcomInvoiceLines@odata.context'\"] = param.hasOwnProperty(\"imvEcomInvoiceLines@odata.context\");",
							"        tests[\"Body contains 'imvEcomInvoiceLines'\"] = param.hasOwnProperty(\"imvEcomInvoiceLines\");",
							"        if (param.hasOwnProperty(\"imvEcomInvoiceLines\"))",
							"        {",
							"            param.imvEcomInvoiceLines.forEach(function(param){",
							"                tests[\"imvEcomInvoiceLines contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"                tests[\"imvEcomInvoiceLines contains 'documentId'\"] = param.hasOwnProperty(\"documentId\");",
							"                tests[\"imvEcomInvoiceLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imvEcomInvoiceLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imvEcomInvoiceLines contains 'price'\"] = param.hasOwnProperty(\"price\");",
							"                tests[\"imvEcomInvoiceLines contains 'taxAmount'\"] = param.hasOwnProperty(\"taxAmount\");",
							"            })",
							"        }",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomInvoices?$expand=imvEcomInvoiceLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvEcomInvoices"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvEcomInvoiceLines"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EcomRefunds",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Get imvEcomInvoices Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'entryNumber'\"] =  param.hasOwnProperty(\"entryNumber\");",
							"        tests[\"Body contains 'orderNumber'\"] =  param.hasOwnProperty(\"orderNumber\");",
							"        tests[\"Body contains 'referenceId'\"] =  param.hasOwnProperty(\"referenceId\");",
							"        tests[\"Body contains 'originalAmount'\"] =  param.hasOwnProperty(\"originalAmount\");",
							"        tests[\"Body contains 'refundAmount'\"] =  param.hasOwnProperty(\"refundAmount\");",
							"        tests[\"Body contains 'status'\"] =  param.hasOwnProperty(\"status\");",
							"        tests[\"Body contains 'errorMessage'\"] = param.hasOwnProperty(\"errorMessage\");",
							"        tests[\"Body contains 'originalSalesChannelType'\"] = param.hasOwnProperty(\"originalSalesChannelType\");",
							"        tests[\"Body contains 'customerName'\"] = param.hasOwnProperty(\"customerName\");",
							"        tests[\"Body contains 'paymentBrand'\"] = param.hasOwnProperty(\"paymentBrand\");",
							"        tests[\"Body contains 'paymentAccount'\"] = param.hasOwnProperty(\"paymentAccount\");",
							"        tests[\"Body contains 'changeVersion'\"] = param.hasOwnProperty(\"changeVersion\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomRefunds",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvEcomRefunds"
					]
				}
			},
			"response": [
				{
					"name": "EcomRefunds Post",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomRefunds(35)/Microsoft.NAV.Post",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvEcomRefunds(35)",
								"Microsoft.NAV.Post"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "bdfd0983-4dc1-4d52-8c67-dac2d0f15b9f"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Dec 2018 07:42:12 GMT"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "EcomRefunds Modify",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "W/\"JzE2OzJ6WUJBQUNISXdBQUFBQUExMTsxMzYwMzQzMTExNjA7Jw==\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"Error\"\n}"
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomRefunds(35)",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvEcomRefunds(35)"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "285860"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "f98f4a8c-454c-4dd8-8a4e-9884677e12f9"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Dec 2018 07:27:21 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomRefunds/$entity\",\n    \"@odata.etag\": \"W/\\\"JzE2OzJ6WUJBQUNISXdBQUFBQUExMTsxMzg0ODgxODAxMzA7Jw==\\\"\",\n    \"entryNumber\": 35,\n    \"orderNumber\": \"ISO03084\",\n    \"referenceId\": \"abcdefghijklmnopqrstuvwxyz\",\n    \"originalAmount\": 365.33,\n    \"refundAmount\": 232.99,\n    \"status\": \"Error\",\n    \"errorMessage\": \"\",\n    \"originalSalesChannelType\": \"Ecommerce\",\n    \"customerName\": \"Valentino Rossi\",\n    \"paymentBrand\": \"\",\n    \"paymentAccount\": \"\",\n    \"changeVersion\": 0\n}"
				}
			]
		},
		{
			"name": "PickingTasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "255da1b7-f17e-4b0d-9523-fdf03eab8d4a",
						"exec": [
							"console.log('Picking Tasks Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'number'\"] =  param.hasOwnProperty(\"number\");",
							"        tests[\"Body contains 'numberOfTrolleys'\"] =  param.hasOwnProperty(\"numberOfTrolleys\");",
							"        tests[\"Body contains 'pickerID'\"] =  param.hasOwnProperty(\"pickerID\");",
							"        tests[\"Body contains 'pickingDate'\"] =  param.hasOwnProperty(\"pickingDate\");",
							"        tests[\"Body contains 'printTime'\"] =  param.hasOwnProperty(\"printTime\");",
							"        tests[\"Body contains 'startTime'\"] = param.hasOwnProperty(\"startTime\");",
							"        tests[\"Body contains 'endTime'\"] = param.hasOwnProperty(\"endTime\");",
							"        tests[\"Body contains 'status'\"] = param.hasOwnProperty(\"status\");",
							"        tests[\"Body contains 'storeNo'\"] = param.hasOwnProperty(\"storeNo\");",
							"        tests[\"Body contains 'totalPackageQty'\"] = param.hasOwnProperty(\"totalPackageQty\");",
							"        tests[\"Body contains 'zoneFilter'\"] = param.hasOwnProperty(\"zoneFilter\");",
							"        tests[\"Body contains 'connectedPT'\"] = param.hasOwnProperty(\"connectedPT\");",
							"        tests[\"Body contains 'pickArea'\"] = param.hasOwnProperty(\"pickArea\");",
							"        tests[\"Body contains 'totalWeight'\"] = param.hasOwnProperty(\"totalWeight\");",
							"        tests[\"Body contains 'totalVolume'\"] = param.hasOwnProperty(\"totalVolume\");",
							"        tests[\"Body contains 'pickingSummaryPrinted'\"] = param.hasOwnProperty(\"pickingSummaryPrinted\");",
							"        tests[\"Body contains 'imvPickingTaskLines@odata.context'\"] = param.hasOwnProperty(\"imvPickingTaskLines@odata.context\");",
							"        tests[\"Body contains 'imvPickingTaskLines'\"] = param.hasOwnProperty(\"imvPickingTaskLines\");",
							"        if (param.hasOwnProperty(\"imvPickingTaskLines\"))",
							"        {",
							"            param.imvPickingTaskLines.forEach(function(param){",
							"                tests[\"imvPickingTaskLines contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"                tests[\"imvPickingTaskLines contains 'documentNumber'\"] = param.hasOwnProperty(\"documentNumber\");",
							"                tests[\"imvPickingTaskLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imvPickingTaskLines contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");",
							"                tests[\"imvPickingTaskLines contains 'itemDescription'\"] = param.hasOwnProperty(\"itemDescription\");",
							"                tests[\"imvPickingTaskLines contains 'salesDocumentNumber'\"] = param.hasOwnProperty(\"salesDocumentNumber\");",
							"                tests[\"imvPickingTaskLines contains 'salesDocumentSequence'\"] = param.hasOwnProperty(\"salesDocumentSequence\");",
							"                tests[\"imvPickingTaskLines contains 'serviceOrderNumber'\"] = param.hasOwnProperty(\"salesDocumentNumber\");",
							"                tests[\"imvPickingTaskLines contains 'serviceProductNumber'\"] = param.hasOwnProperty(\"serviceProductNumber\");",
							"                tests[\"imvPickingTaskLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imvPickingTaskLines contains 'pickedQty'\"] = param.hasOwnProperty(\"pickedQty\");",
							"                tests[\"imvPickingTaskLines contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"                tests[\"imvPickingTaskLines contains 'retailLocationCode'\"] = param.hasOwnProperty(\"retailLocationCode\");",
							"                tests[\"imvPickingTaskLines contains 'retailBinCode'\"] = param.hasOwnProperty(\"retailBinCode\");",
							"                tests[\"imvPickingTaskLines contains 'pickingZone'\"] = param.hasOwnProperty(\"pickingZone\");",
							"                tests[\"imvPickingTaskLines contains 'status'\"] = param.hasOwnProperty(\"status\");",
							"                tests[\"imvPickingTaskLines contains 'reasonCode'\"] = param.hasOwnProperty(\"reasonCode\");",
							"                tests[\"imvPickingTaskLines contains 'numberPackagesQty'\"] = param.hasOwnProperty(\"numberPackagesQty\");",
							"                tests[\"imvPickingTaskLines contains 'pickingTaskNumber'\"] = param.hasOwnProperty(\"pickingTaskNumber\");",
							"                tests[\"imvPickingTaskLines contains 'pickingDate'\"] = param.hasOwnProperty(\"pickingDate\");",
							"                tests[\"imvPickingTaskLines contains 'pickedDateTime'\"] = param.hasOwnProperty(\"pickedDateTime\");",
							"                tests[\"imvPickingTaskLines contains 'userId'\"] = param.hasOwnProperty(\"userId\");",
							"                tests[\"imvPickingTaskLines contains 'errorInPicking'\"] = param.hasOwnProperty(\"errorInPicking\");",
							"                tests[\"imvPickingTaskLines contains 'lastModifiedDate'\"] = param.hasOwnProperty(\"lastModifiedDate\");",
							"                tests[\"imvPickingTaskLines contains 'lineTotalVolume'\"] = param.hasOwnProperty(\"lineTotalVolume\");",
							"                tests[\"imvPickingTaskLines contains 'lineTotalWeight'\"] = param.hasOwnProperty(\"lineTotalWeight\");",
							"                tests[\"imvPickingTaskLines contains 'handoverRetailLocationCode'\"] = param.hasOwnProperty(\"handoverRetailLocationCode\");",
							"                tests[\"imvPickingTaskLines contains 'handoverRetailBinCode'\"] = param.hasOwnProperty(\"handoverRetailBinCode\");",
							"                tests[\"imvPickingTaskLines contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");",
							"                tests[\"imvPickingTaskLines contains 'grossWeight'\"] = param.hasOwnProperty(\"grossWeight\");",
							"                tests[\"imvPickingTaskLines contains 'unitVolume'\"] = param.hasOwnProperty(\"unitVolume\");",
							"                tests[\"imvPickingTaskLines contains 'hfbNumber'\"] = param.hasOwnProperty(\"hfbNumber\");",
							"                tests[\"imvPickingTaskLines contains 'width'\"] = param.hasOwnProperty(\"width\");",
							"                tests[\"imvPickingTaskLines contains 'height'\"] = param.hasOwnProperty(\"height\");",
							"                tests[\"imvPickingTaskLines contains 'length'\"] = param.hasOwnProperty(\"length\");",
							"            })",
							"        }",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"value": "*",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingTasks?$expand=imvPickingTaskLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPickingTasks"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvPickingTaskLines"
						}
					]
				}
			},
			"response": [
				{
					"name": "PATCH Picking Task",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pickerID\": \"SFI\",\n    \"pickingDate\": \"2019-02-05\",\n    \"startTime\": \"2019-02-05T13:00:00Z\",\n    \"endTime\": \"2019-02-05T13:00:00Z\",\n    \"status\": \"Waiting to be picked\"\n}"
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingTasks(4ba3cfdf-1234-4757-9124-00e6cb9c4e39)",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvPickingTasks(4ba3cfdf-1234-4757-9124-00e6cb9c4e39)"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "575"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "376370dc-2999-44e0-9732-4f7e626d4fec"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Tue, 05 Feb 2019 16:02:54 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingTasks/$entity\",\n    \"@odata.etag\": \"W/\\\"JzQwO2RWa0JBQUo3LzFBQVZBQXRBREFBTUFBd0FESUFNUUExQUFBQUFBQT0xMTsxMzg2ODU1MTk4NjA7Jw==\\\"\",\n    \"id\": \"4ba3cfdf-1234-4757-9124-00e6cb9c4e39\",\n    \"number\": \"PT-000215\",\n    \"numberOfTrolleys\": 0,\n    \"pickerID\": \"SFI\",\n    \"pickingDate\": \"2019-02-05\",\n    \"printTime\": \"0001-01-01T00:00:00Z\",\n    \"startTime\": \"2019-02-05T13:00:00Z\",\n    \"endTime\": \"2019-02-05T13:00:00Z\",\n    \"status\": \"Waiting to be picked\",\n    \"storeNo\": \"235\",\n    \"totalPackageQty\": 6,\n    \"zoneFilter\": \"\"\n}"
				},
				{
					"name": "PATCH Picking Task Line",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pickedQty\": 1,\n    \"status\": \"Error\",\n    \"reasoneCode\": \"DAMAGEITEM\",\n    \"pickingDate\": \"2018-09-07\",\n    \"pickedDateTime\": \"2019-02-05T13:00:00Z\",\n    \"userId\": \"SFI\",\n    \"errorInPicking\": true,\n    \"lastModifiedDate\": \"2019-02-05T13:00:00Z\"\n}"
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingTasks(4ba3cfdf-1234-4757-9124-00e6cb9c4e39)/imvPickingTaskLines('PI-0000382',20000)",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvPickingTasks(4ba3cfdf-1234-4757-9124-00e6cb9c4e39)",
								"imvPickingTaskLines('PI-0000382',20000)"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "940"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "ab53bfff-370b-4d82-9598-023b8b32b7eb"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Tue, 05 Feb 2019 15:56:02 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingTasks(4ba3cfdf-1234-4757-9124-00e6cb9c4e39)/imvPickingTaskLines/$entity\",\n    \"@odata.etag\": \"W/\\\"JzUyO2NGa0JBQUo3LzFBQVNRQXRBREFBTUFBd0FEQUFNd0E0QURJQUFBQUFoeUJPQUFBQUFBPT0xMTsxMzg2ODU1MTcyMTA7Jw==\\\"\",\n    \"documentNumber\": \"PI-0000382\",\n    \"sequence\": 20000,\n    \"itemNumber\": \"50236487\",\n    \"itemDescription\": \"ALGOT MOUNT RAIL 66 WHITE\",\n    \"salesDocumentNumber\": \"ISO03523\",\n    \"salesDocumentSequence\": 20000,\n    \"serviceOrderNumber\": \"SVRO-002407\",\n    \"serviceProductNumber\": \"WO_PICK\",\n    \"quantity\": 2,\n    \"pickedQty\": 1,\n    \"locationCode\": \"235\",\n    \"retailLocationCode\": \"SS\",\n    \"retailBinCode\": \"070815\",\n    \"pickingZone\": \"\",\n    \"status\": \"Error\",\n    \"reasoneCode\": \"DAMAGEITEM\",\n    \"numberPackagesQty\": 2,\n    \"pickingTaskNumber\": \"PT-000215\",\n    \"pickingDate\": \"2018-09-07\",\n    \"pickedDateTime\": \"2019-02-05T13:00:00Z\",\n    \"userId\": \"SFI\",\n    \"errorInPicking\": true,\n    \"lastModifiedDate\": \"2019-02-05T13:00:00Z\"\n}"
				}
			]
		},
		{
			"name": "PickingOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdc73d1c-d37a-4a78-85d6-70f409fb2614",
						"exec": [
							"console.log('Picking Orders Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'number'\"] =  param.hasOwnProperty(\"number\");",
							"        tests[\"Body contains 'salesOrderNumber'\"] =  param.hasOwnProperty(\"salesOrderNumber\");",
							"        tests[\"Body contains 'serviceOrderNumber'\"] =  param.hasOwnProperty(\"serviceOrderNumber\");",
							"        tests[\"Body contains 'documentDate'\"] =  param.hasOwnProperty(\"documentDate\");",
							"        tests[\"Body contains 'pickingDate'\"] =  param.hasOwnProperty(\"pickingDate\");",
							"        tests[\"Body contains 'pickingEndTime'\"] = param.hasOwnProperty(\"pickingEndTime\");",
							"        tests[\"Body contains 'status'\"] = param.hasOwnProperty(\"status\");",
							"        tests[\"Body contains 'numberOfTrolleys'\"] = param.hasOwnProperty(\"numberOfTrolleys\");",
							"        tests[\"Body contains 'storeNo'\"] = param.hasOwnProperty(\"storeNo\");",
							"        tests[\"Body contains 'linkedPickingOrdersNumber'\"] = param.hasOwnProperty(\"linkedPickingOrdersNumber\");",
							"        tests[\"Body contains 'salesChannel'\"] = param.hasOwnProperty(\"salesChannel\");",
							"        tests[\"Body contains 'salesChannelType'\"] = param.hasOwnProperty(\"salesChannelType\");",
							"        tests[\"Body contains 'deliveryProductNumber'\"] = param.hasOwnProperty(\"deliveryProductNumber\");",
							"        tests[\"Body contains 'checkerId'\"] = param.hasOwnProperty(\"checkerId\");",
							"        tests[\"Body contains 'totalWeight'\"] = param.hasOwnProperty(\"totalWeight\");",
							"        tests[\"Body contains 'totalVolume'\"] = param.hasOwnProperty(\"totalVolume\");        ",
							"        tests[\"Body contains 'handoverRetailLocationCode'\"] = param.hasOwnProperty(\"handoverRetailLocationCode\");",
							"        tests[\"Body contains 'handoverRetailBinCode'\"] = param.hasOwnProperty(\"handoverRetailBinCode\");        ",
							"        tests[\"Body contains 'imvPickingOrderLines@odata.context'\"] = param.hasOwnProperty(\"imvPickingOrderLines@odata.context\");",
							"        tests[\"Body contains 'imvPickingOrderLines'\"] = param.hasOwnProperty(\"imvPickingOrderLines\");",
							"        if (param.hasOwnProperty(\"imvPickingOrderLines\"))",
							"        {",
							"            param.imvPickingOrderLines.forEach(function(param){",
							"                tests[\"imvPickingOrderLines contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"                tests[\"imvPickingOrderLines contains 'documentNumber'\"] = param.hasOwnProperty(\"documentNumber\");",
							"                tests[\"imvPickingOrderLines contains 'sequence'\"] = param.hasOwnProperty(\"sequence\");",
							"                tests[\"imvPickingOrderLines contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");",
							"                tests[\"imvPickingOrderLines contains 'itemDescription'\"] = param.hasOwnProperty(\"itemDescription\");",
							"                tests[\"imvPickingOrderLines contains 'salesDocumentNumber'\"] = param.hasOwnProperty(\"salesDocumentNumber\");",
							"                tests[\"imvPickingOrderLines contains 'salesDocumentSequence'\"] = param.hasOwnProperty(\"salesDocumentSequence\");",
							"                tests[\"imvPickingOrderLines contains 'serviceOrderNumber'\"] = param.hasOwnProperty(\"salesDocumentNumber\");",
							"                tests[\"imvPickingOrderLines contains 'serviceProductNumber'\"] = param.hasOwnProperty(\"serviceProductNumber\");",
							"                tests[\"imvPickingOrderLines contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");",
							"                tests[\"imvPickingOrderLines contains 'pickedQty'\"] = param.hasOwnProperty(\"pickedQty\");",
							"                tests[\"imvPickingOrderLines contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"                tests[\"imvPickingOrderLines contains 'retailLocationCode'\"] = param.hasOwnProperty(\"retailLocationCode\");",
							"                tests[\"imvPickingOrderLines contains 'retailBinCode'\"] = param.hasOwnProperty(\"retailBinCode\");",
							"                tests[\"imvPickingOrderLines contains 'pickingZone'\"] = param.hasOwnProperty(\"pickingZone\");",
							"                tests[\"imvPickingOrderLines contains 'status'\"] = param.hasOwnProperty(\"status\");",
							"                tests[\"imvPickingOrderLines contains 'reasoneCode'\"] = param.hasOwnProperty(\"reasoneCode\");",
							"                tests[\"imvPickingOrderLines contains 'numberPackagesQty'\"] = param.hasOwnProperty(\"numberPackagesQty\");",
							"                tests[\"imvPickingOrderLines contains 'pickingTaskNumber'\"] = param.hasOwnProperty(\"pickingTaskNumber\");",
							"                tests[\"imvPickingOrderLines contains 'pickingDate'\"] = param.hasOwnProperty(\"pickingDate\");",
							"                tests[\"imvPickingOrderLines contains 'pickedDateTime'\"] = param.hasOwnProperty(\"pickedDateTime\");",
							"                tests[\"imvPickingOrderLines contains 'userId'\"] = param.hasOwnProperty(\"userId\");",
							"                tests[\"imvPickingOrderLines contains 'errorInPicking'\"] = param.hasOwnProperty(\"errorInPicking\");",
							"                tests[\"imvPickingOrderLines contains 'lastModifiedDate'\"] = param.hasOwnProperty(\"lastModifiedDate\");",
							"                tests[\"imvPickingOrderLines contains 'checkerId'\"] = param.hasOwnProperty(\"checkerId\");",
							"                tests[\"imvPickingOrderLines contains 'lineTotalVolume'\"] = param.hasOwnProperty(\"lineTotalVolume\");",
							"                tests[\"imvPickingOrderLines contains 'lineTotalWeight'\"] = param.hasOwnProperty(\"lineTotalWeight\");",
							"                tests[\"imvPickingOrderLines contains 'handoverRetailLocationCode'\"] = param.hasOwnProperty(\"handoverRetailLocationCode\");",
							"                tests[\"imvPickingOrderLines contains 'handoverRetailBinCode'\"] = param.hasOwnProperty(\"handoverRetailBinCode\");       ",
							"                tests[\"imvPickingTaskLines contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");",
							"                tests[\"imvPickingTaskLines contains 'grossWeight'\"] = param.hasOwnProperty(\"grossWeight\");",
							"                tests[\"imvPickingTaskLines contains 'unitVolume'\"] = param.hasOwnProperty(\"unitVolume\");",
							"                tests[\"imvPickingTaskLines contains 'hfbNumber'\"] = param.hasOwnProperty(\"hfbNumber\");",
							"                tests[\"imvPickingTaskLines contains 'width'\"] = param.hasOwnProperty(\"width\");",
							"                tests[\"imvPickingTaskLines contains 'height'\"] = param.hasOwnProperty(\"height\");",
							"                tests[\"imvPickingTaskLines contains 'length'\"] = param.hasOwnProperty(\"length\");                ",
							"            })",
							"        }",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders?$expand=imvPickingOrderLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPickingOrders"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvPickingOrderLines"
						}
					]
				}
			},
			"response": [
				{
					"name": "PATCH PickingOrder",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pickingDate\": \"2018-07-19\",\n    \"pickingEndTime\": \"2019-02-05T13:00:00Z\",\n    \"status\": \"Error\"\n}"
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders(b3f1e533-91e0-49c7-b6ce-0065396d4826)",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvPickingOrders(b3f1e533-91e0-49c7-b6ce-0065396d4826)"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "625"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "1b9ee382-277a-46a6-8887-6ffeda45596a"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Tue, 05 Feb 2019 16:08:59 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders/$entity\",\n    \"@odata.etag\": \"W/\\\"JzQ0O2Ixa0JBQUo3LzFBQVNRQXRBREFBTUFBd0FEQUFNUUEyQURrQUFBQUFBQT09MTE7MTM4Njg1NTMyNDcwOyc=\\\"\",\n    \"id\": \"b3f1e533-91e0-49c7-b6ce-0065396d4826\",\n    \"number\": \"PI-0000169\",\n    \"salesOrderNumber\": \"ISO02821\",\n    \"serviceOrderNumber\": \"SVRO-001560\",\n    \"documentDate\": \"2018-07-19\",\n    \"pickingDate\": \"2018-07-19\",\n    \"pickingEndTime\": \"2019-02-05T13:00:00Z\",\n    \"status\": \"Error\",\n    \"numberOfTrolleys\": 0,\n    \"storeNo\": \"235\",\n    \"linkedPickingOrdersNumber\": 1,\n    \"salesChannel\": \"WEB\",\n    \"salesChannelType\": \"Ecommerce\",\n    \"deliveryProductNumber\": \"\"\n}"
				},
				{
					"name": "PATCH Picking Order Line",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pickedQty\": 1,\n    \"status\": \"Error\",\n    \"reasoneCode\": \"DAMAGEITEM\",\n    \"pickingDate\": \"2018-09-07\",\n    \"pickedDateTime\": \"2019-02-05T13:00:00Z\",\n    \"userId\": \"SFI\",\n    \"errorInPicking\": true,\n    \"lastModifiedDate\": \"2019-02-05T13:00:00Z\"\n}"
						},
						"url": {
							"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders(b3f1e533-91e0-49c7-b6ce-0065396d4826)/imvPickingOrderLines('PI-0000169',20000)",
							"protocol": "https",
							"host": [
								"mvxtesting",
								"k3devops",
								"nl"
							],
							"port": "7048",
							"path": [
								"NAV",
								"api",
								"beta",
								"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
								"imvPickingOrders(b3f1e533-91e0-49c7-b6ce-0065396d4826)",
								"imvPickingOrderLines('PI-0000169',20000)"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "961"
						},
						{
							"key": "Content-Type",
							"value": "application/json; odata.metadata=minimal"
						},
						{
							"key": "Server",
							"value": "Microsoft-HTTPAPI/2.0"
						},
						{
							"key": "request-id",
							"value": "3f26d8fa-1a29-418b-9724-3f3bf9773be2"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Date"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Content-Length"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "Server"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "OData-Version"
						},
						{
							"key": "OData-Version",
							"value": "4.0"
						},
						{
							"key": "Date",
							"value": "Tue, 05 Feb 2019 16:07:37 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"@odata.context\": \"https://mvxtesting.k3devops.nl:7048/NAV/api/beta/$metadata#companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders(b3f1e533-91e0-49c7-b6ce-0065396d4826)/imvPickingOrderLines/$entity\",\n    \"@odata.etag\": \"W/\\\"JzUyO2NGa0JBQUo3LzFBQVNRQXRBREFBTUFBd0FEQUFNUUEyQURrQUFBQUFoeUJPQUFBQUFBPT0xMTsxMzg2ODU1MjI0MjA7Jw==\\\"\",\n    \"documentNumber\": \"PI-0000169\",\n    \"sequence\": 20000,\n    \"itemNumber\": \"60138113\",\n    \"itemDescription\": \"PLASTIS ICE CUBE TRAY GREEN/PINK/TURQUOISE\",\n    \"salesDocumentNumber\": \"ISO02821\",\n    \"salesDocumentSequence\": 20000,\n    \"serviceOrderNumber\": \"SVRO-001560\",\n    \"serviceProductNumber\": \"WO_PICK\",\n    \"quantity\": 3,\n    \"pickedQty\": 1,\n    \"locationCode\": \"235\",\n    \"retailLocationCode\": \"MH\",\n    \"retailBinCode\": \"MH1422\",\n    \"pickingZone\": \"03\",\n    \"status\": \"Error\",\n    \"reasoneCode\": \"DAMAGEITEM\",\n    \"numberPackagesQty\": 3,\n    \"pickingTaskNumber\": \"PT-000057\",\n    \"pickingDate\": \"2018-09-07\",\n    \"pickedDateTime\": \"2019-02-05T13:00:00Z\",\n    \"userId\": \"SFI\",\n    \"errorInPicking\": true,\n    \"lastModifiedDate\": \"2019-02-05T13:00:00Z\"\n}"
				}
			]
		},
		{
			"name": "ServiceProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvServiceProducts Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, ",
							"    contentIdMissed, ",
							"    contentNumberMissed,",
							"    contentTypeMissed, ",
							"\tcontentDisplayNameMissed, ",
							"\tcontentLastModifiedDateTimeMissed,",
							"    contentImvServiceProductsMissed, ",
							"\tcontentImvServiceStoresMissed, ",
							"\tcontentImvSericeItemsMissed,",
							"\tcontentEnabledMissed,",
							"\tcontentStartDateMissed,",
							"\tcontentEndDateMissed,",
							"\tcontentCapacityUnitMissed,",
							"\tcontentNoItemLinkMissed ;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"number\"))",
							"            contentNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"type\"))",
							"            contentTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"salesStartDate\"))",
							"            contentStartDateMissed = true;",
							"\t\tif(!param.hasOwnProperty(\"endStartDate\"))",
							"            contentEndDateMissed = true;",
							"\t\tif(!param.hasOwnProperty(\"enabled\"))",
							"            contentEnabledMissed = true;",
							"\t\tif(!param.hasOwnProperty(\"capacityUnit\"))",
							"            contentCapacityUnitMissed = true;",
							"\t\tif(!param.hasOwnProperty(\"noItemLink\"))",
							"            contentNoItemLinkMissed = true;",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"imvServiceStores\"))",
							"            contentImvServiceStoresMissed = true;",
							"\t\tif(!param.hasOwnProperty(\"imvServiceItems\"))",
							"            contentImvSericeItemsMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = ",
							"    contentIdMissed = ",
							"    contentNumberMissed = ",
							"    contentTypeMissed = ",
							"\tcontentDisplayNameMissed = ",
							"\tcontentLastModifiedDateTimeMissed = ",
							"    contentImvServiceProductsMissed = ",
							"\tcontentImvServiceStoresMissed = ",
							"\tcontentImvSericeItemsMissed = ",
							"\tcontentEnabledMissed = ",
							"\tcontentStartDateMissed = ",
							"\tcontentEndDateMissed = ",
							"\tcontentCapacityUnitMissed = ",
							"\tcontentNoItemLinkMissed =",
							"    true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'number'\"] = !contentNumberMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'type'\"] = !contentTypeMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'salesStartDate'\"] = !contentStartDateMissed;",
							"tests[\"Body contains 'endStartDate'\"] = !contentEndDateMissed;",
							"tests[\"Body contains 'enabled'\"] = !contentEnabledMissed;",
							"tests[\"Body contains 'capacityUnit'\"] = !contentCapacityUnitMissed;",
							"tests[\"Body contains 'noItemLink'\"] = !contentNoItemLinkMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'imvServiceStores'\"] = !contentImvServiceStoresMissed;",
							"tests[\"Body contains 'imvServiceItems'\"] = !contentImvSericeItemsMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvServiceProducts/?$expand=imvServiceStores,imvServiceItems",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvServiceProducts",
						""
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvServiceStores,imvServiceItems"
						}
					]
				},
				"description": "Show MVX Service Products"
			},
			"response": []
		},
		{
			"name": "PupSOPrintedDoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvServiceProducts Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, ",
							"    contentIdMissed, ",
							"    contentPupSalesOrderMissed,",
							"    contentConsignmentNoteLinkMissed, ",
							"\tcontentFreightNoteLinkMissed, ",
							"\tcontentLastModifiedDateTimeMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"pupSalesOrder\"))",
							"            contentPupSalesOrderMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"consignmentNoteLink\"))",
							"            contentConsignmentNoteLinkMissed = true;",
							"        if(!param.hasOwnProperty(\"freightNoteLink\"))",
							"            contentFreightNoteLinkMissed = true;",
							"        if(!param.hasOwnProperty(\"lastDateTimeModified\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = ",
							"    contentIdMissed = ",
							"    contentPupSalesOrderMissed = ",
							"    contentConsignmentNoteLinkMissed = ",
							"\tcontentFreightNoteLinkMissed = ",
							"\tcontentLastModifiedDateTimeMissed = ",
							"    true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'pupSalesOrder'\"] = !contentPupSalesOrderMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'consignmentNoteLink'\"] = !contentConsignmentNoteLinkMissed;",
							"tests[\"Body contains 'freightNoteLink'\"] = !contentFreightNoteLinkMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPupSOPrintedDocEntities",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPupSOPrintedDocEntities"
					]
				},
				"description": "Show MVX Service Products"
			},
			"response": []
		},
		{
			"name": "ReserveTimeSlots",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvReservesTimeSlot Entity Automated Tests');",
							"tests[\"Status Code is 201\"] = responseCode.code === 201;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'timeSlotNo'\"] = jsonData.hasOwnProperty(\"timeSlotNo\");",
							"tests[\"Body contains 'serviceProduct'\"] = jsonData.hasOwnProperty(\"serviceProduct\");",
							"tests[\"Body contains 'date'\"] = jsonData.hasOwnProperty(\"date\");",
							"tests[\"Body contains 'weight'\"] = jsonData.hasOwnProperty(\"weight\");",
							"tests[\"Body contains 'volume'\"] = jsonData.hasOwnProperty(\"volume\");",
							"tests[\"Body contains 'quantity'\"] = jsonData.hasOwnProperty(\"quantity\");",
							"tests[\"Body contains 'capacity'\"] = jsonData.hasOwnProperty(\"capacity\");",
							"tests[\"Body contains 'storeNo'\"] = jsonData.hasOwnProperty(\"storeNo\");",
							"tests[\"Body contains 'multiSlot'\"] = jsonData.hasOwnProperty(\"multiSlot\");",
							"tests[\"Body contains 'postCode'\"] = jsonData.hasOwnProperty(\"postCode\");",
							"tests[\"Body contains 'action'\"] = jsonData.hasOwnProperty(\"action\");",
							"tests[\"Body contains 'reservationID'\"] = jsonData.hasOwnProperty(\"reservationID\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "        {\n            \"timeSlotNo\": 480,\n            \"serviceProduct\": \"123\",\n            \"date\": \"2017-02-06\",\n            \"weight\": 1,\n            \"volume\": 1,\n            \"quantity\": 1,\n            \"capacity\": 1,\n            \"storeNo\": \"S001\",\n            \"postCode\": \"\",\n            \"action\": \"New\"\n        }"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvReservesTimeSlot",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvReservesTimeSlot"
					]
				}
			},
			"response": []
		},
		{
			"name": "TimeSlotRequests",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvTimeSlotRequests Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentStoreNoMissed, contentPostCodeMissed, contentStartDateMissed, contentStartTimeMissed, contentEndDateMissed, contentServiceProductNoMissed,contentServiceProductTypeMissed,contentWeightMissed,contentVolumeMissed,contentQuantityMissed,contentCapacityMissed, contentImvTimeSlotRequestResultsMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"storeNo\"))",
							"            contentStoreNoMissed = true;",
							"        if(!param.hasOwnProperty(\"postCode\"))",
							"            contentPostCodeMissed = true;",
							"        if(!param.hasOwnProperty(\"startDate\"))",
							"            contentStartDateMissed = true;",
							"        if(!param.hasOwnProperty(\"startTime\"))",
							"            contentStartTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"endDate\"))",
							"            contentEndDateMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceProductNo\"))",
							"            contentServiceProductNoMissed = true;",
							"        if(!param.hasOwnProperty(\"serviceProductType\"))",
							"            contentServiceProductTypeMissed = true;",
							"        if(!param.hasOwnProperty(\"weight\"))",
							"            contentWeightMissed = true;",
							"        if(!param.hasOwnProperty(\"volume\"))",
							"            contentVolumeMissed = true;",
							"        if(!param.hasOwnProperty(\"quantity\"))",
							"            contentQuantityMissed = true;",
							"        if(!param.hasOwnProperty(\"capacity\"))",
							"            contentCapacityMissed = true;",
							"        if(!param.hasOwnProperty(\"imvTimeSlotRequestResults\"))",
							"            contentImvTimeSlotRequestResultsMissed = true;",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentStoreNoMissed = contentPostCodeMissed = contentStartDateMissed = contentStartTimeMissed = contentEndDateMissed = contentServiceProductNoMissed = contentServiceProductTypeMissed = contentWeightMissed = contentVolumeMissed = contentQuantityMissed = contentCapacityMissed = contentImvTimeSlotRequestResultsMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'storeNo'\"] = !contentStoreNoMissed;",
							"tests[\"Body contains 'postCode'\"] = !contentPostCodeMissed;",
							"tests[\"Body contains 'startDate'\"] = !contentStartDateMissed;",
							"tests[\"Body contains 'startTime'\"] = !contentStartTimeMissed;",
							"tests[\"Body contains 'endDate'\"] = !contentEndDateMissed;",
							"tests[\"Body contains 'serviceProductNo'\"] = !contentServiceProductNoMissed;",
							"tests[\"Body contains 'serviceProductType'\"] = !contentServiceProductTypeMissed;",
							"tests[\"Body contains 'weight'\"] = !contentWeightMissed;",
							"tests[\"Body contains 'volume'\"] = !contentVolumeMissed;",
							"tests[\"Body contains 'quantity'\"] = !contentQuantityMissed;",
							"tests[\"Body contains 'capacity'\"] = !contentCapacityMissed;",
							"tests[\"Body contains 'imvTimeSlotRequestResults'\"] = !contentImvTimeSlotRequestResultsMissed;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)/imvTimeSlotRequests?$expand=imvTimeSlotRequestResults($filter=fullyBooked eq false)&$filter=(serviceProductNo eq '40000362') and (storeNo eq '235') and (postCode eq '555') and (startDate eq 2018-10-03) and (endDate eq 2018-11-30) and (weight eq 101)",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(7a0a1d59-d95f-4eb0-a79b-8f59de17de08)",
						"imvTimeSlotRequests"
					],
					"query": [
						{
							"key": "$expand",
							"value": "imvTimeSlotRequestResults($filter=fullyBooked eq false)"
						},
						{
							"key": "$filter",
							"value": "(serviceProductNo eq '40000362') and (storeNo eq '235') and (postCode eq '555') and (startDate eq 2018-10-03) and (endDate eq 2018-11-30) and (weight eq 101)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ServiceOrdersGET",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvEcomServiceOrders_GET Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'serviceOrderNo'\"] = param.hasOwnProperty(\"serviceOrderNo\");",
							"        tests[\"Body contains 'status'\"] = param.hasOwnProperty(\"status\");",
							"        tests[\"Body contains 'serviceProviderNo'\"] = param.hasOwnProperty(\"serviceProviderNo\");",
							"        tests[\"Body contains 'serviceProductNo'\"] = param.hasOwnProperty(\"serviceProductNo\");",
							"        tests[\"Body contains 'timeSlotNo'\"] = param.hasOwnProperty(\"timeSlotNo\");",
							"        tests[\"Body contains 'reservationID'\"] = param.hasOwnProperty(\"reservationID\");",
							"        tests[\"Body contains 'price'\"] = param.hasOwnProperty(\"price\");",
							"        tests[\"Body contains 'priceIncludingTax'\"] = param.hasOwnProperty(\"priceIncludingTax\");",
							"        tests[\"Body contains 'priceCalcMethod'\"] = param.hasOwnProperty(\"priceCalcMethod\");",
							"        tests[\"Body contains 'bookedDays'\"] = param.hasOwnProperty(\"bookedDays\");",
							"        tests[\"Body contains 'multiSlot'\"] = param.hasOwnProperty(\"multiSlot\");",
							"        tests[\"Body contains 'date'\"] = param.hasOwnProperty(\"date\");",
							"        tests[\"Body contains 'startTime'\"] = param.hasOwnProperty(\"startTime\");",
							"        tests[\"Body contains 'endTime'\"] = param.hasOwnProperty(\"endTime\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomServiceOrders",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvEcomServiceOrders"
					]
				}
			},
			"response": []
		},
		{
			"name": "ServiceOrdersPATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvEcomServiceOrders_GET Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'serviceOrderNo'\"] = jsonData.hasOwnProperty(\"serviceOrderNo\");",
							"tests[\"Body contains 'status'\"] = jsonData.hasOwnProperty(\"status\");",
							"tests[\"Body contains 'serviceProviderNo'\"] = jsonData.hasOwnProperty(\"serviceProviderNo\");",
							"tests[\"Body contains 'serviceProductNo'\"] = jsonData.hasOwnProperty(\"serviceProductNo\");",
							"tests[\"Body contains 'timeSlotNo'\"] = jsonData.hasOwnProperty(\"timeSlotNo\");",
							"tests[\"Body contains 'reservationID'\"] = jsonData.hasOwnProperty(\"reservationID\");",
							"tests[\"Body contains 'price'\"] = jsonData.hasOwnProperty(\"price\");",
							"tests[\"Body contains 'priceIncludingTax'\"] = jsonData.hasOwnProperty(\"priceIncludingTax\");",
							"tests[\"Body contains 'priceCalcMethod'\"] = jsonData.hasOwnProperty(\"priceCalcMethod\");",
							"tests[\"Body contains 'bookedDays'\"] = jsonData.hasOwnProperty(\"bookedDays\");",
							"tests[\"Body contains 'multiSlot'\"] = jsonData.hasOwnProperty(\"multiSlot\");",
							"tests[\"Body contains 'date'\"] = jsonData.hasOwnProperty(\"date\");",
							"tests[\"Body contains 'startTime'\"] = jsonData.hasOwnProperty(\"startTime\");",
							"tests[\"Body contains 'endTime'\"] = jsonData.hasOwnProperty(\"endTime\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"value": "*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\t\"timeSlotNo\": 3711,\r\t\"reservationID\": 3711,\r\t\"price\": 15,\r\t\"priceIncludingTax\": 12.1,\r\t\"priceCalcMethod\": \"Per piece\",\r\t\"bookedDays\": 1,\r\t\"multiSlot\": false,\r\t\"date\": \"2018-12-19\",\r\t\"startTime\": \"07:00:00\",\r\t\"endTime\": \"17:00:00\"\r}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomServiceOrders(serviceOrderNo='SVRO-005000')",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvEcomServiceOrders(serviceOrderNo='SVRO-005000')"
					]
				}
			},
			"response": []
		},
		{
			"name": "PaymentInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvEcomOrderPayments Automated Tests');",
							"tests[\"Status Code is 201\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"",
							"tests[\"Body contains 'payment_reference'\"] = jsonData.hasOwnProperty(\"Payment_Reference_ID\");",
							"tests[\"Body contains 'payment_date'\"] = jsonData.hasOwnProperty(\"Payment_Date\");",
							"tests[\"Body contains 'payment_type'\"] = jsonData.hasOwnProperty(\"Payment_Type\");",
							"tests[\"Body contains 'payment_amount'\"] = jsonData.hasOwnProperty(\"Payment_Amount\");",
							"tests[\"Body contains 'status'\"] = jsonData.hasOwnProperty(\"Status\");",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "If-Match",
						"value": "*",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    Status : \"Payment Confirmed\"\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvEcomOrderPayments('','12345fghijklmnopqrstuvwxyz')",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvEcomOrderPayments('','12345fghijklmnopqrstuvwxyz')"
					]
				},
				"description": "Updating status for payment info from status Waiting for Payment to Payment Confirmed"
			},
			"response": []
		},
		{
			"name": "TransferJournalLine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aeb4f14c-00a9-4e0e-9e68-37688317e3b4",
						"exec": [
							"console.log('imvTransferJournalLines Entity Automated Tests');\r",
							"tests[\"Status Code is 201\"] = responseCode.code === 201;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");\r",
							"tests[\"Body contains 'journalTemplateName'\"] = jsonData.hasOwnProperty(\"journalTemplateName\");\r",
							"tests[\"Body contains 'journalBatchName'\"] = jsonData.hasOwnProperty(\"journalBatchName\");\r",
							"tests[\"Body contains 'lineNumber'\"] = jsonData.hasOwnProperty(\"lineNumber\");\r",
							"tests[\"Body contains 'itemNumber'\"] = jsonData.hasOwnProperty(\"itemNumber\");\r",
							"tests[\"Body contains 'reasonCode'\"] = jsonData.hasOwnProperty(\"reasonCode\");\r",
							"tests[\"Body contains 'quantity'\"] = jsonData.hasOwnProperty(\"quantity\");\r",
							"tests[\"Body contains 'fromLocationCode'\"] = jsonData.hasOwnProperty(\"fromLocationCode\");\r",
							"tests[\"Body contains 'fromRetailLocationCode'\"] = jsonData.hasOwnProperty(\"fromRetailLocationCode\");\r",
							"tests[\"Body contains 'fromRetailBinCode'\"] = jsonData.hasOwnProperty(\"fromRetailBinCode\");\r",
							"tests[\"Body contains 'toLocationCode'\"] = jsonData.hasOwnProperty(\"toLocationCode\");\r",
							"tests[\"Body contains 'toRetailLocationCode'\"] = jsonData.hasOwnProperty(\"toRetailLocationCode\");\r",
							"tests[\"Body contains 'toRetailBinCode'\"] = jsonData.hasOwnProperty(\"toRetailBinCode\");\r",
							"tests[\"Body contains 'userID'\"] = jsonData.hasOwnProperty(\"userID\");\r",
							"tests[\"Body contains 'confirmedQuantity'\"] = jsonData.hasOwnProperty(\"confirmedQuantity\");\r",
							"tests[\"Body contains 'palletId'\"] = jsonData.hasOwnProperty(\"palletId\");\r",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");\r",
							"tests[\"Body contains 'destRetailBinCheckString'\"] = jsonData.hasOwnProperty(\"destRetailBinCheckString\");\r",
							"tests[\"Body contains 'palletLength'\"] = jsonData.hasOwnProperty(\"palletLength\");\r",
							"tests[\"Body contains 'palletWidth'\"] = jsonData.hasOwnProperty(\"palletWidth\");\r",
							"tests[\"Body contains 'palletHeight'\"] = jsonData.hasOwnProperty(\"palletHeight\");\r",
							"tests[\"Body contains 'palletWeight'\"] = jsonData.hasOwnProperty(\"palletWeight\");\r",
							"tests[\"Body contains 'palletProfile'\"] = jsonData.hasOwnProperty(\"palletProfile\");\r",
							"tests[\"Body contains 'status'\"] = jsonData.hasOwnProperty(\"status\");\r",
							"tests[\"Body contains 'id'\"] = jsonData.hasOwnProperty(\"id\");\r",
							"tests[\"Body contains 'documentNumber'\"] = jsonData.hasOwnProperty(\"documentNumber\");\r",
							"tests[\"Body contains 'itemSalesMethod'\"] = jsonData.hasOwnProperty(\"itemSalesMethod\");\r",
							"tests[\"Body contains 'sourceBinCheckString'\"] = jsonData.hasOwnProperty(\"sourceBinCheckString\");\r",
							"tests[\"Body contains 'hfbNumber'\"] = jsonData.hasOwnProperty(\"hfbNumber\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"journalBatchName\": \"ALEXLIM\",\r\n\t\"documentNumber\": \"CHGDOC123\",\r\n\t\"itemNumber\": \"70285434\",\r\n\t\"reasonCode\": \"00P\",\r\n\t\"quantity\": 10,\r\n\t\"fromLocationCode\": \"235\",\r\n\t\"fromRetailLocationCode\": \"FS\",\r\n\t\"fromRetailBinCode\": \"193210\",\r\n\t\"toLocationCode\": \"235\",\t\r\n\t\"toRetailLocationCode\": \"FS\",\r\n\t\"toRetailBinCode\": \"193210\",\r\n\t\"userID\": \"ALEXLIM\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvTransferJournalLines",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvTransferJournalLines"
					]
				}
			},
			"response": []
		},
		{
			"name": "TransferJournalLine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f1a3304-f558-48da-91ca-a668ad09f957",
						"exec": [
							"console.log('imvTransferJournalLines Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'journalTemplateName'\"] = jsonData.hasOwnProperty(\"journalTemplateName\");",
							"tests[\"Body contains 'journalBatchName'\"] = jsonData.hasOwnProperty(\"journalBatchName\");",
							"tests[\"Body contains 'lineNumber'\"] = jsonData.hasOwnProperty(\"lineNumber\");",
							"tests[\"Body contains 'itemNumber'\"] = jsonData.hasOwnProperty(\"itemNumber\");",
							"tests[\"Body contains 'reasonCode'\"] = jsonData.hasOwnProperty(\"reasonCode\");",
							"tests[\"Body contains 'quantity'\"] = jsonData.hasOwnProperty(\"quantity\");",
							"tests[\"Body contains 'fromLocationCode'\"] = jsonData.hasOwnProperty(\"fromLocationCode\");",
							"tests[\"Body contains 'fromRetailLocationCode'\"] = jsonData.hasOwnProperty(\"fromRetailLocationCode\");",
							"tests[\"Body contains 'fromRetailBinCode'\"] = jsonData.hasOwnProperty(\"fromRetailBinCode\");",
							"tests[\"Body contains 'toLocationCode'\"] = jsonData.hasOwnProperty(\"toLocationCode\");",
							"tests[\"Body contains 'toRetailLocationCode'\"] = jsonData.hasOwnProperty(\"toRetailLocationCode\");",
							"tests[\"Body contains 'toRetailBinCode'\"] = jsonData.hasOwnProperty(\"toRetailBinCode\");",
							"tests[\"Body contains 'userID'\"] = jsonData.hasOwnProperty(\"userID\");",
							"tests[\"Body contains 'confirmedQuantity'\"] = jsonData.hasOwnProperty(\"confirmedQuantity\");",
							"tests[\"Body contains 'palletId'\"] = jsonData.hasOwnProperty(\"palletId\");",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");",
							"tests[\"Body contains 'destRetailBinCheckString'\"] = jsonData.hasOwnProperty(\"destRetailBinCheckString\");",
							"tests[\"Body contains 'palletLength'\"] = jsonData.hasOwnProperty(\"palletLength\");",
							"tests[\"Body contains 'palletWidth'\"] = jsonData.hasOwnProperty(\"palletWidth\");",
							"tests[\"Body contains 'palletHeight'\"] = jsonData.hasOwnProperty(\"palletHeight\");",
							"tests[\"Body contains 'palletWeight'\"] = jsonData.hasOwnProperty(\"palletWeight\");",
							"tests[\"Body contains 'palletProfile'\"] = jsonData.hasOwnProperty(\"palletProfile\");",
							"tests[\"Body contains 'status'\"] = jsonData.hasOwnProperty(\"status\");",
							"tests[\"Body contains 'id'\"] = jsonData.hasOwnProperty(\"id\");",
							"tests[\"Body contains 'documentNumber'\"] = jsonData.hasOwnProperty(\"documentNumber\");",
							"tests[\"Body contains 'itemSalesMethod'\"] = jsonData.hasOwnProperty(\"itemSalesMethod\");",
							"tests[\"Body contains 'sourceBinCheckString'\"] = jsonData.hasOwnProperty(\"sourceBinCheckString\");",
							"tests[\"Body contains 'hfbNumber'\"] = jsonData.hasOwnProperty(\"hfbNumber\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"value": "*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"documentNumber\": \"ALEXDOC123\",\r\n\t\"confirmedQuantity\": 1,\r\n\t\"userID\": \"ALEXLIM\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvTransferJournalLines(journalTemplateName='TRANSFER',journalBatchName='ALEXLIM',lineNumber=50000)",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvTransferJournalLines(journalTemplateName='TRANSFER',journalBatchName='ALEXLIM',lineNumber=50000)"
					]
				}
			},
			"response": []
		},
		{
			"name": "HFBs",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvHFBs Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'hfbNumber'\"] =  param.hasOwnProperty(\"hfbNumber\");",
							"        tests[\"Body contains 'hfbName'\"] =  param.hasOwnProperty(\"hfbName\");        ",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvHFBs",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvHFBs"
					]
				},
				"description": "Show RBD Home Furnishing Business"
			},
			"response": []
		},
		{
			"name": "UserSetup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvUserSetups Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'userID'\"] =  param.hasOwnProperty(\"userID\");",
							"        tests[\"Body contains 'reasonCodeFilter'\"] =  param.hasOwnProperty(\"reasonCodeFilter\");",
							"        tests[\"Body contains 'mgfRoles'\"] =  param.hasOwnProperty(\"mgfRoles\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvUserSetups",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvUserSetups"
					]
				},
				"description": "Show User Setup"
			},
			"response": []
		},
		{
			"name": "Retail Item Bins",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvRetailItemBins Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"        tests[\"Body contains 'itemNo'\"] = param.hasOwnProperty(\"itemNo\");",
							"        tests[\"Body contains 'retailLocCode'\"] = param.hasOwnProperty(\"retailLocCode\");",
							"        tests[\"Body contains 'retailBinCode'\"] = param.hasOwnProperty(\"retailBinCode\");",
							"        tests[\"Body contains 'type'\"] = param.hasOwnProperty(\"type\");",
							"        tests[\"Body contains 'description'\"] = param.hasOwnProperty(\"description\");",
							"        tests[\"Body contains 'stock'\"] = param.hasOwnProperty(\"stock\");",
							"        tests[\"Body contains 'binCheckstring'\"] = param.hasOwnProperty(\"binCheckString\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvRetailItemBins",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvRetailItemBins"
					]
				},
				"description": "Show Retail Item Bins"
			},
			"response": []
		},
		{
			"name": "Add-on Bins",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvAddonBins Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");\r",
							"        tests[\"Body contains 'addonBinCode'\"] =  param.hasOwnProperty(\"addonBinCode\");\r",
							"        tests[\"Body contains 'description'\"] =  param.hasOwnProperty(\"description\");\r",
							"        tests[\"Body contains 'type'\"] =  param.hasOwnProperty(\"type\");\r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvAddonBins",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvAddonBins"
					]
				},
				"description": "Show Add-on Bins"
			},
			"response": []
		},
		{
			"name": "ItemsMGF",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItems Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentNumberMissed, contentDisplayNameMissed, contentDisplayNameInLocalLanguageMissed, contentunitPriceMissed, contentUnitPriceInclVATMissed, contentBlockedMissed, contentInactiveMissed, contentSalesStartDateMissed, contentEndDateSalesMissed, contentItemCategoryMissed, contentAssemblyItemMissed, contentWidthMissed, contentHeightMissed, contentLengthMissed, contentGrossWeightMissed, contentUnitVolumeMissed, contentLastModifiedDateTimeMissed, contentUnitsPerParcelMissed,contentimvItemsBuyableOnlineMissed, contentimvItemsOnlineInfoMissed, contentimvItemsSellingInfoMissed,contentimvItemBinInfoMissed,contentimvArticlePalletMissed,contentimvItemAddonBinMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"number\"))",
							"            contentNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"displayNameInLocalLanguage\"))",
							"            contentDisplayNameInLocalLanguageMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPrice\"))",
							"            contentunitPriceMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPriceInclVAT\"))",
							"            contentUnitPriceInclVATMissed = true;",
							"        if(!param.hasOwnProperty(\"blocked\"))",
							"            contentBlockedMissed = true;",
							"        if(!param.hasOwnProperty(\"inactive\"))",
							"            contentInactiveMissed = true;",
							"        if(!param.hasOwnProperty(\"salesStartDate\"))",
							"            contentSalesStartDateMissed = true;",
							"        if(!param.hasOwnProperty(\"endDateSales\"))",
							"            contentEndDateSalesMissed = true;",
							"        if(!param.hasOwnProperty(\"itemCategory\"))",
							"            contentItemCategoryMissed = true;",
							"        if(!param.hasOwnProperty(\"assemblyItem\"))",
							"            contentAssemblyItemMissed = true;",
							"        if(!param.hasOwnProperty(\"width\"))",
							"            contentWidthMissed = true;",
							"        if(!param.hasOwnProperty(\"height\"))",
							"            contentHeightMissed = true;   ",
							"        if(!param.hasOwnProperty(\"length\"))",
							"            contentLengthMissed = true;",
							"        if(!param.hasOwnProperty(\"grossWeight\"))",
							"            contentGrossWeightMissed = true;  ",
							"        if(!param.hasOwnProperty(\"unitVolume\"))",
							"            contentUnitVolumeMissed = true;            ",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"LocationFilter\"))",
							"            contentLocationFilterMissed = false;            ",
							"        if(!param.hasOwnProperty(\"unitsPerParcel\"))",
							"            contentUnitsPerParcelMissed = true;",
							"        if(!param.hasOwnProperty(\"imvItemsBuyableOnline\"))",
							"            contentimvItemsBuyableOnlineMissed = true;",
							"        if(!param.hasOwnProperty(\"imvItemsOnlineInfo\"))",
							"            contentimvItemsOnlineInfoMissed = true;    ",
							"        if (param.hasOwnProperty(\"imvItemsOnlineInfo\"))",
							"        {",
							"            param.imvItemsOnlineInfo.forEach(function(param){",
							"                tests[\"imvItemsOnlineInfo contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvItemsOnlineInfo contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");",
							"                tests[\"imvItemsOnlineInfo contains 'pickingBinCode'\"] = param.hasOwnProperty(\"pickingBinCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'replenishmentCode'\"] = param.hasOwnProperty(\"replenishmentCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeCode'\"] = param.hasOwnProperty(\"rangeCode\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeCodeNextYear'\"] = param.hasOwnProperty(\"rangeCodeNextYear\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeOfferThisPCD'\"] = param.hasOwnProperty(\"rangeOfferThisPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeOfferNextPCD'\"] = param.hasOwnProperty(\"rangeOfferNextPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'commClassThisPCD'\"] = param.hasOwnProperty(\"commClassThisPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'commClassNextPCD'\"] = param.hasOwnProperty(\"commClassNextPCD\");",
							"                tests[\"imvItemsOnlineInfo contains 'rangeStatus'\"] = param.hasOwnProperty(\"rangeStatus\");",
							"                tests[\"imvItemsOnlineInfo contains 'serviceLevel'\"] = param.hasOwnProperty(\"serviceLevel\");",
							"                tests[\"imvItemsOnlineInfo contains 'quantitySold'\"] = param.hasOwnProperty(\"quantitySold\");",
							"                tests[\"imvItemsOnlineInfo contains 'previousYearStructure'\"] = param.hasOwnProperty(\"previousYearStructure\");",
							"                tests[\"imvItemsOnlineInfo contains 'nextYearStructure'\"] = param.hasOwnProperty(\"nextYearStructure\");",
							"                tests[\"imvItemsOnlineInfo contains 'acesAndKing'\"] = param.hasOwnProperty(\"acesAndKing\");",
							"            })",
							"        }",
							"        if(!param.hasOwnProperty(\"imvItemsSellingInfo\"))",
							"            contentimvItemsSellingInfoMissed = true;   ",
							"        if (param.hasOwnProperty(\"imvItemsSellingInfo\"))",
							"        {",
							"            param.imvItemsSellingInfo.forEach(function(param){",
							"                tests[\"imvItemsOnlineInfo contains 'number'\"] = param.hasOwnProperty(\"number\");",
							"                tests[\"imvItemsOnlineInfo contains 'aws'\"] = param.hasOwnProperty(\"aws\");",
							"                tests[\"imvItemsOnlineInfo contains 'assembled'\"] = param.hasOwnProperty(\"assembled\");",
							"            })",
							"        }",
							"        if(!param.hasOwnProperty(\"imvItemBinInfos\"))",
							"            contentimvItemBinInfoMissed = true;   ",
							"        if (param.hasOwnProperty(\"imvItemBinInfos\"))",
							"        {",
							"            param.imvItemBinInfos.forEach(function(param){",
							"                tests[\"imvItemBinInfos contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"                tests[\"imvItemBinInfos contains 'pickRetailBinCode'\"] = param.hasOwnProperty(\"pickRetailBinCode\");",
							"                tests[\"imvItemBinInfos contains 'pickRetailLocCode'\"] = param.hasOwnProperty(\"pickRetailLocCode\");",
							"                tests[\"imvItemBinInfos contains 'pickRetailBinStock'\"] = param.hasOwnProperty(\"pickRetailBinStock\");               ",
							"            })",
							"        }",
							"        if(!param.hasOwnProperty(\"imvArticlePallets\"))",
							"            contentimvArticlePalletMissed = true;   ",
							"        if (param.hasOwnProperty(\"imvArticlePallets\"))",
							"        {",
							"            param.imvArticlePallets.forEach(function(param){",
							"                tests[\"imvArticlePallets contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");",
							"                tests[\"imvArticlePallets contains 'supplierNumber'\"] = param.hasOwnProperty(\"supplierNumber\");",
							"                tests[\"imvArticlePallets contains 'palletProfile'\"] = param.hasOwnProperty(\"palletProfile\");",
							"                tests[\"imvArticlePallets contains 'palletLength'\"] = param.hasOwnProperty(\"palletLength\");         ",
							"                tests[\"imvArticlePallets contains 'palletWidth'\"] = param.hasOwnProperty(\"palletWidth\");",
							"                tests[\"imvArticlePallets contains 'palletHeight'\"] = param.hasOwnProperty(\"palletHeight\"); ",
							"                tests[\"imvArticlePallets contains 'palletQuantity'\"] = param.hasOwnProperty(\"palletQuantity\");  ",
							"            })",
							"        }",
							"        if(!param.hasOwnProperty(\"imvItemAddonBins\"))",
							"            contentimvItemAddonBinMissed = true;   ",
							"        if (param.hasOwnProperty(\"imvItemAddonBins\"))",
							"        {",
							"            param.imvItemAddonBins.forEach(function(param){",
							"                tests[\"imvItemAddonBins contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");",
							"                tests[\"imvItemAddonBins contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"                tests[\"imvItemAddonBins contains 'pickRetailLocCode'\"] = param.hasOwnProperty(\"pickRetailLocCode\");",
							"                tests[\"imvItemAddonBins contains 'pickRetailBinCode'\"] = param.hasOwnProperty(\"pickRetailBinCode\");",
							"                tests[\"imvItemAddonBins contains 'addonBinCode'\"] = param.hasOwnProperty(\"addonBinCode\");",
							"                tests[\"imvItemAddonBins contains 'capacity'\"] = param.hasOwnProperty(\"capacity\"); ",
							"            })",
							"        }        ",
							"    })",
							"}",
							"else {",
							"    contentOdataEtagMissed = contentIdMissed = contentNumberMissed = contentDisplayNameMissed = contentDisplayNameInLocalLanguageMissed = contentunitPriceMissed = contentUnitPriceInclVATMissed = contentBlockedMissed = contentInactiveMissed = contentSalesStartDateMissed = contentEndDateSalesMissed = contentItemCategoryMissed = contentAssemblyItemMissed = contentWidthMissed = contentHeightMissed = contentLengthMissed = contentGrossWeightMissed = contentUnitVolumeMissed = contentLastModifiedDateTimeMissed = contentLocationFilterMissed = contentUnitsPerParcelMissed = contentimvItemsBuyableOnlineMissed = contentimvItemsOnlineInfoMissed = contentimvItemsSellingInfoMissed = contentimvItemBinInfoMissed = contentimvArticlePalletMissed = contentimvItemAddonBinMissed = true;",
							"}",
							"tests[\"Body contains '@odata.etag'\"] = !contentOdataEtagMissed;",
							"tests[\"Body contains 'id'\"] = !contentIdMissed;",
							"tests[\"Body contains 'number'\"] = !contentNumberMissed;",
							"tests[\"Body contains 'displayName'\"] = !contentDisplayNameMissed;",
							"tests[\"Body contains 'displayNameInLocalLanguage'\"] = !contentDisplayNameInLocalLanguageMissed;",
							"tests[\"Body contains 'unitPrice'\"] = !contentunitPriceMissed;",
							"tests[\"Body contains 'unitPriceInclVAT'\"] = !contentUnitPriceInclVATMissed;",
							"tests[\"Body contains 'blocked'\"] = !contentBlockedMissed;",
							"tests[\"Body contains 'inactive'\"] = !contentInactiveMissed;",
							"tests[\"Body contains 'salesStartDate'\"] = !contentSalesStartDateMissed;",
							"tests[\"Body contains 'endDateSales'\"] = !contentEndDateSalesMissed;",
							"tests[\"Body contains 'itemCategory'\"] = !contentItemCategoryMissed;",
							"tests[\"Body contains 'assemblyItem'\"] = !contentAssemblyItemMissed;",
							"tests[\"Body contains 'width'\"] = !contentWidthMissed;",
							"tests[\"Body contains 'height'\"] = !contentHeightMissed;",
							"tests[\"Body contains 'length'\"] = !contentLengthMissed;",
							"tests[\"Body contains 'grossWeight'\"] = !contentGrossWeightMissed;",
							"tests[\"Body contains 'unitVolume'\"] = !contentUnitVolumeMissed;",
							"tests[\"Body contains 'unitsPerParcel'\"] = !contentUnitsPerParcelMissed;",
							"tests[\"Body contains 'lastModifiedDateTime'\"] = !contentLastModifiedDateTimeMissed;",
							"tests[\"Body contains 'LocationFilter'\"] = !contentLocationFilterMissed;",
							"tests[\"Body contains 'imvItemsBuyableOnline'\"] = !contentimvItemsBuyableOnlineMissed;",
							"tests[\"Body contains 'imvItemsOnlineInfo'\"] = !contentimvItemsOnlineInfoMissed;",
							"tests[\"Body contains 'imvItemBinInfos'\"] = !contentimvItemBinInfoMissed;",
							"tests[\"Body contains 'imvArticlePallets'\"] = !contentimvArticlePalletMissed;",
							"tests[\"Body contains 'imvItemAddonBins'\"] = !contentimvItemAddonBinMissed;",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic SU1WX0FQSVVTRVI6UEBzc3dvcmQwMQ=="
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItems?$filter=locationFilter eq '235'&$expand=imvItemBinInfos,imvArticlePallets,imvItemAddonBins",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItems"
					],
					"query": [
						{
							"key": "$filter",
							"value": "locationFilter eq '235'"
						},
						{
							"key": "$expand",
							"value": "imvItemBinInfos,imvArticlePallets,imvItemAddonBins"
						}
					]
				},
				"description": "Show MVXs' Items(MGF)"
			},
			"response": []
		},
		{
			"name": "Consignment Information",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"EventRec24Code\":\"243\",\r\n    \"EventSubCode\":\"8\",\r\n    \"EventDateTime\":\"2019-03-07T16:10:00.000+00:00\",\r\n    \"ConsignmentIdBUCode\":\"277\",\r\n    \"ConsignmentIdBUType\":\"DT\",\r\n    \"ConsignmentIdNumber\":\"1\",\r\n    \"ConsignorBUCode\":\"277\",\r\n    \"ConsignorBUType\":\"DT\",\r\n    \"ConsignorBUSequence\":\"1\",\r\n    \"ConsigneeBUCode\":\"350\",\r\n    \"ConsigneeBUType\":\"STO\",\r\n    \"ConsigneeBUSequence\":\"1\",\r\n    \"ActualDispatchDateTime\":\"2019-01-28T00:00:00.000+08:00\",\r\n    \"TotalNumberOfPackages\":\"2\",\r\n    \"EstimatedArrivalDateTime\":\"2019-03-28T00:00:00.000+08:00\",\r\n    \"INCOTerms\":\"DDU\",\r\n    \"AgreedNamedPlaceBUCode\":\"359\",\r\n    \"AgreedNamedPlaceBUType\":\"STP\",\r\n    \"AgreedNamedPlaceBUSequence\":\"2\",\r\n    \"AgreedNamedPlace\":\"359\",\r\n    \"FirstAvailableLineSequence\":\"3\",\r\n    \"consignmentLines\":[\r\n        {\r\n            \"LineSequence\":\"1\",\r\n            \"ItemNumber\":\"50382327\",\r\n            \"Itemtype\":\"ART\",\r\n            \"LineQuantity\":\"42\",\r\n            \"LineQuantityUOM\":\"PK\",\r\n            \"InternalOrderLineReference\":\"373116415709582279\",\r\n            \"UnitLoadSSCC\":\"373116415709582279\",\r\n            \"DistributionOrderType\":\"TRA\",\r\n            \"DispatchUnitType\":\"FULL\",\r\n            \"ItemSupplierBUCode\":\"19197\",\r\n            \"ItemSupplierBUType\":\"SUP\",\r\n            \"ProductionWeek\":\"15\",\r\n            \"ProductionBatch\":\"2\",\r\n            \"CountryOfOrigin\":\"SE\",\r\n            \"DWPItemNumber\":\"1\",\r\n            \"DWPItemType\":\"ART\",\r\n            \"DWPSupplierBUCode\":\"277\",\r\n            \"DWPSupplierBUType\":\"STO\",\r\n            \"DWPNumber\":\"1\",\r\n            \"DWPEdition\":\"3\",\r\n            \"DWPValidFromDate\":\"2019-03-07T16:10:00.000+00:00\"\r\n        },\r\n        {\r\n            \"LineSequence\":\"2\",\r\n            \"ItemNumber\":\"50382330\",\r\n            \"Itemtype\":\"ART\",\r\n            \"LineQuantity\":\"100\",\r\n            \"LineQuantityUOM\":\"PK\",\r\n            \"InternalOrderLineReference\":\"373116415709582300\",\r\n            \"UnitLoadSSCC\":\"373116415709582300\",\r\n            \"DistributionOrderType\":\"TRA\",\r\n            \"DispatchUnitType\":\"HALF\",\r\n            \"ItemSupplierBUCode\":\"19197\",\r\n            \"ItemSupplierBUType\":\"SUP\",\r\n            \"ProductionWeek\":\"20\",\r\n            \"ProductionBatch\":\"2\",\r\n            \"CountryOfOrigin\":\"SE\",\r\n            \"DWPItemNumber\":\"1\",\r\n            \"DWPItemType\":\"ART\",\r\n            \"DWPSupplierBUCode\":\"277\",\r\n            \"DWPSupplierBUType\":\"STO\",\r\n            \"DWPNumber\":\"1\",\r\n            \"DWPEdition\":\"3\",\r\n            \"DWPValidFromDate\":\"2019-04-29T16:10:00.000+00:00\"\r\n        }\r\n    ],\r\n    \"shipmentDigests\":[\r\n        {\r\n            \"ShipmentIDBuCode\":\"277\",\r\n            \"ShipmentIDBUType\":\"STO\",\r\n            \"ShipmentIDNumber\":\"S846411\",\r\n            \"ISO6346EquipmentCode\":\"WHSU5191729\",\r\n            \"GenericEquipmentCode\":\"WHSU5191729\",\r\n            \"BillOfLading\":\"WHLC0279G00460\",\r\n            \"PickUpLocationBUCode\":\"277\",\r\n            \"PickUpLocationBUType\":\"STO\",\r\n            \"PickUpLocationBUSequence\":\"3\",\r\n            \"DeliveryLocationBUCode\":\"277\",\r\n            \"DeliveryLocationBUType\":\"STO\",\r\n            \"DeliveryLocationBUSequence\":\"3\",\r\n            \"ShipmentDisconnectDateTime\":\"2019-03-07T16:10:00.000+00:00\"\r\n        },\r\n        {\r\n            \"ShipmentIDBuCode\":\"350\",\r\n            \"ShipmentIDBUType\":\"STO\",\r\n            \"ShipmentIDNumber\":\"S846422\",\r\n            \"ISO6346EquipmentCode\":\"WHSU5191800\",\r\n            \"GenericEquipmentCode\":\"WHSU5191800\",\r\n            \"BillOfLading\":\"WHLC0279G00470\",\r\n            \"PickUpLocationBUCode\":\"350\",\r\n            \"PickUpLocationBUType\":\"STO\",\r\n            \"PickUpLocationBUSequence\":\"4\",\r\n            \"DeliveryLocationBUCode\":\"350\",\r\n            \"DeliveryLocationBUType\":\"STO\",\r\n            \"DeliveryLocationBUSequence\":\"4\",\r\n            \"ShipmentDisconnectDateTime\":\"2019-04-29T16:10:00.000+00:00\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/Consignment_NIRs?%24expand=consignmentLines,shipmentDigests",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"Consignment_NIRs"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "consignmentLines,shipmentDigests"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RTO_RTR Information",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"UnitType\":\"STO\",\r\n    \"UnitCode\":\"969\",\r\n    \"UnitClass\":\"BU\",\r\n    \"TransactionDateTime\":\"27-05-2019 10:01:04\",\r\n    \"itemRecord\":\r\n    [\r\n        {\r\n            \"ItemNo\":\"70356718\",\r\n            \"ItemType\":\"ART\",\r\n            \"RestToOrderQuantity\":\"10\",\r\n            \"RestToReceiveQuantity\":\"20\",\r\n            \"OverOrdering\":\"Y\",\r\n            \"SRQ\":\"Y\",\r\n            \"ReadyFlag\":\"Y\",\r\n            \"DeleteDateTime\":\"\",\r\n            \"RecordType\":\"RTR_RTO\",\r\n            \"InsertDateTime\":\"19-02-2019 10:33:50\",\r\n            \"UpdateDateTime\":\"06-05-2019 11:40:47\"\r\n        },\r\n        {\r\n            \"ItemNo\":\"70356719\",\r\n            \"ItemType\":\"ART\",\r\n            \"RestToOrderQuantity\":\"5\",\r\n            \"RestToReceiveQuantity\":\"10\",\r\n            \"OverOrdering\":\"Y\",\r\n            \"SRQ\":\"Y\",\r\n            \"ReadyFlag\":\"Y\",\r\n            \"DeleteDateTime\":\"\",\r\n            \"RecordType\":\"RTR_RTO\",\r\n            \"InsertDateTime\":\"19-04-2019 10:33:50\",\r\n            \"UpdateDateTime\":\"06-06-2019 11:40:47\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/RTO_RTRs?%24expand=itemRecord",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"RTO_RTRs"
					],
					"query": [
						{
							"key": "%24expand",
							"value": "itemRecord"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sales Methods",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvSalesMethods_Get Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");\r",
							"        tests[\"Body contains 'salesMethodCode'\"] =  param.hasOwnProperty(\"salesMethodCode\");\r",
							"        tests[\"Body contains 'description'\"] =  param.hasOwnProperty(\"description\");\r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvSalesMethods",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvSalesMethods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retail Locations",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvRetailLocations_Get Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");\r",
							"        tests[\"Body contains 'locationCode'\"] =  param.hasOwnProperty(\"locationCode\");\r",
							"        tests[\"Body contains 'retailLocationCode'\"] =  param.hasOwnProperty(\"retailLocationCode\");\r",
							"        tests[\"Body contains 'retailLocationName'\"] =  param.hasOwnProperty(\"retailLocationName\");\r",
							"        tests[\"Body contains 'externalWarehouse'\"] =  param.hasOwnProperty(\"externalWarehouse\");\r",
							"        tests[\"Body contains 'blocked'\"] =  param.hasOwnProperty(\"blocked\");        \r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvRetailLocations",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvRetailLocations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retail Location Bin",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvRetailLocationBins Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");\r",
							"        tests[\"Body contains 'locationCode'\"] =  param.hasOwnProperty(\"locationCode\");\r",
							"        tests[\"Body contains 'retailLocationCode'\"] =  param.hasOwnProperty(\"retailLocationCode\");\r",
							"        tests[\"Body contains 'binCode'\"] =  param.hasOwnProperty(\"binCode\");\r",
							"        tests[\"Body contains 'binType'\"] =  param.hasOwnProperty(\"binType\");\r",
							"        tests[\"Body contains 'checkString'\"] =  param.hasOwnProperty(\"checkString\");\r",
							"        tests[\"Body contains 'description'\"] =  param.hasOwnProperty(\"description\");                \r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvRetailLocationBinCodes",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvRetailLocationBinCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReasonCode",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvReasonCodes Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'code'\"] =  param.hasOwnProperty(\"code\");",
							"        tests[\"Body contains 'description'\"] =  param.hasOwnProperty(\"description\");        ",
							"        tests[\"Body contains 'group'\"] =  param.hasOwnProperty(\"group\");        ",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvReasonCodes",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvReasonCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TransferJournalLine",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvTransferJournalLines Entity Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains 'journalTemplateName'\"] = param.hasOwnProperty(\"journalTemplateName\");\r",
							"        tests[\"Body contains 'journalBatchName'\"] = param.hasOwnProperty(\"journalBatchName\");\r",
							"        tests[\"Body contains 'lineNumber'\"] = param.hasOwnProperty(\"lineNumber\");\r",
							"        tests[\"Body contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");\r",
							"        tests[\"Body contains 'reasonCode'\"] = param.hasOwnProperty(\"reasonCode\");\r",
							"        tests[\"Body contains 'quantity'\"] = param.hasOwnProperty(\"quantity\");\r",
							"        tests[\"Body contains 'fromLocationCode'\"] = param.hasOwnProperty(\"fromLocationCode\");\r",
							"        tests[\"Body contains 'fromRetailLocationCode'\"] = param.hasOwnProperty(\"fromRetailLocationCode\");\r",
							"        tests[\"Body contains 'fromRetailBinCode'\"] = param.hasOwnProperty(\"fromRetailBinCode\");\r",
							"        tests[\"Body contains 'toLocationCode'\"] = param.hasOwnProperty(\"toLocationCode\");\r",
							"        tests[\"Body contains 'toRetailLocationCode'\"] = param.hasOwnProperty(\"toRetailLocationCode\");\r",
							"        tests[\"Body contains 'toRetailBinCode'\"] = param.hasOwnProperty(\"toRetailBinCode\");\r",
							"        tests[\"Body contains 'userID'\"] = param.hasOwnProperty(\"userID\");\r",
							"        tests[\"Body contains 'confirmedQuantity'\"] = param.hasOwnProperty(\"confirmedQuantity\");\r",
							"        tests[\"Body contains 'palletID'\"] = param.hasOwnProperty(\"palletID\");\r",
							"        tests[\"Body contains 'description'\"] = param.hasOwnProperty(\"description\");\r",
							"        tests[\"Body contains 'destRetailBinCheckString'\"] = param.hasOwnProperty(\"destRetailBinCheckString\");      \r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvTransferJournalLines?$filter=confirmedQuantity eq 0 and toLocationCode ne '' and toRetailLocationCode ne '' and toRetailBinCode ne '' and itemNumber eq '70285434'",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvTransferJournalLines"
					],
					"query": [
						{
							"key": "$filter",
							"value": "confirmedQuantity eq 0 and toLocationCode ne '' and toRetailLocationCode ne '' and toRetailBinCode ne '' and itemNumber eq '70285434'"
						},
						{
							"key": "$filter",
							"value": "confirmedQuantity eq 0 and toLocationCode ne '' and toRetailLocationCode ne '' and toRetailBinCode ne '' and palletID eq '789456'",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "InvSignaledItems",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvInvSignalledItems Entity Automated Tests');",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'itemNo'\"] = jsonData.hasOwnProperty(\"itemNo\");",
							"tests[\"Body contains 'reasonCode'\"] = jsonData.hasOwnProperty(\"reasonCode\");",
							"tests[\"Body contains 'comment'\"] = jsonData.hasOwnProperty(\"comment\");",
							"tests[\"Body contains 'inventory'\"] = jsonData.hasOwnProperty(\"inventory\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"itemNo\" : \"50262848\",\n\t\"reasonCode\" : \"ADD\",\n\t\"comment\" : \"Nothing to Write\"\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvInvSignaledItems",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvInvSignaledItems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transfer Journal Batches",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvInvSignalledItems Entity Automated Tests');",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'journalTemplateName'\"] = jsonData.hasOwnProperty(\"journalTemplateName\");",
							"tests[\"Body contains 'name'\"] = jsonData.hasOwnProperty(\"name\");",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"journalTemplateName\": \"TRANSFER\",\n    \"name\": \"DEF2\",\n    \"description\": \"Default Description\"\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvTransferJournalBatches",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvTransferJournalBatches"
					]
				}
			},
			"response": []
		},
		{
			"name": "Stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvStores Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'number'\"] =  param.hasOwnProperty(\"number\");",
							"        tests[\"Body contains 'storeID'\"] =  param.hasOwnProperty(\"storeID\");",
							"        tests[\"Body contains 'name'\"] =  param.hasOwnProperty(\"name\");",
							"        tests[\"Body contains 'locationCode'\"] =  param.hasOwnProperty(\"locationCode\");   ",
							"        tests[\"Body contains 'storeType'\"] =  param.hasOwnProperty(\"storeType\");",
							"        tests[\"Body contains 'storeClass'\"] =  param.hasOwnProperty(\"storeClass\");        ",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvStores?",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvStores"
					],
					"query": [
						{
							"key": "$filter",
							"value": "storeType eq 'Store' and storeClass eq 'Store' and number eq '235'",
							"description": "#44551",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MGFRoles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvMGFRoles Entity Automated Tests');\r",
							"tests[\"Status Code is 201\"] = responseCode.code === 201;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");\r",
							"tests[\"Body contains 'number'\"] = jsonData.hasOwnProperty(\"number\");\r",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");\r",
							"tests[\"Body contains 'active'\"] = jsonData.hasOwnProperty(\"active\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"number\": \"TEST\",\n\t\"description\": \"test on creation\",\n\t\"active\": true\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvMGFRoles",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvMGFRoles"
					]
				}
			},
			"response": []
		},
		{
			"name": "ItemJournalLine",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItemJournalLines Entity Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains 'journalTemplateName'\"] = param.hasOwnProperty(\"journalTemplateName\");\r",
							"        tests[\"Body contains 'journalBatchName'\"] = param.hasOwnProperty(\"journalBatchName\");\r",
							"        tests[\"Body contains 'lineNumber'\"] = param.hasOwnProperty(\"lineNumber\");\r",
							"        tests[\"Body contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");\r",
							"        tests[\"Body contains 'description'\"] = param.hasOwnProperty(\"description\");\r",
							"        tests[\"Body contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");\r",
							"        tests[\"Body contains 'retailLocationCode'\"] = param.hasOwnProperty(\"retailLocationCode\");\r",
							"        tests[\"Body contains 'retailBinCode'\"] = param.hasOwnProperty(\"retailBinCode\");\r",
							"        tests[\"Body contains 'qtyCalculated'\"] = param.hasOwnProperty(\"qtyCalculated\");\r",
							"        tests[\"Body contains 'qtyPhysInventory'\"] = param.hasOwnProperty(\"qtyPhysInventory\");\r",
							"        tests[\"Body contains 'count1Qty'\"] = param.hasOwnProperty(\"count1Qty\");\r",
							"        tests[\"Body contains 'count2Qty'\"] = param.hasOwnProperty(\"count2Qty\");\r",
							"        tests[\"Body contains 'counted'\"] = param.hasOwnProperty(\"counted\");\r",
							"        tests[\"Body contains 'hfbNumber'\"] = param.hasOwnProperty(\"hfbNumber\");\r",
							"        tests[\"Body contains 'checkString'\"] = param.hasOwnProperty(\"checkString\");\r",
							"        tests[\"Body contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");\r",
							"        tests[\"Body contains 'hasAddOnBin'\"] = param.hasOwnProperty(\"hasAddOnBin\");\r",
							"        tests[\"Body contains 'stockCountAction'\"] = param.hasOwnProperty(\"stockCountAction\");\r",
							"        tests[\"Body contains 'binSort'\"] = param.hasOwnProperty(\"binSort\");\r",
							"        tests[\"Body contains 'binAisle'\"] = param.hasOwnProperty(\"binAisle\");\r",
							"        tests[\"Body contains 'binLevel'\"] = param.hasOwnProperty(\"binLevel\");\r",
							"        tests[\"Body contains 'binColumn'\"] = param.hasOwnProperty(\"binColumn\");\r",
							"        tests[\"Body contains 'imvItemAddonBins'\"] = param.hasOwnProperty(\"imvItemAddonBins\");\r",
							"        if (param.hasOwnProperty(\"imvItemAddonBins\"))\r",
							"        {\r",
							"            param.imvItemAddonBins.forEach(function(param){\r",
							"                tests[\"imvArticlePallets contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");\r",
							"                tests[\"imvArticlePallets contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");\r",
							"                tests[\"imvArticlePallets contains 'retailLocationCode'\"] = param.hasOwnProperty(\"retailLocationCode\");\r",
							"                tests[\"imvArticlePallets contains 'retailBinCode'\"] = param.hasOwnProperty(\"retailBinCode\");         \r",
							"                tests[\"imvArticlePallets contains 'code'\"] = param.hasOwnProperty(\"code\");\r",
							"                tests[\"imvArticlePallets contains 'capacity'\"] = param.hasOwnProperty(\"capacity\"); \r",
							"                tests[\"imvArticlePallets contains 'type'\"] = param.hasOwnProperty(\"type\");  \r",
							"            })\r",
							"        }        \r",
							"    })\r",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItemJournalLines?$filter=journalTemplateName eq 'IFBPHYS.IN' and journalBatchName eq 'DM'&$expand=imvItemAddonBins($filter=(type eq 'Add-On'))&$orderby=journalTemplateName,journalBatchName,itemNumber",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItemJournalLines"
					],
					"query": [
						{
							"key": "$filter",
							"value": "journalTemplateName eq 'IFBPHYS.IN' and journalBatchName eq 'DM'",
							"description": "#41150"
						},
						{
							"key": "$expand",
							"value": "imvItemAddonBins($filter=(type eq 'Add-On'))",
							"description": "#41150"
						},
						{
							"key": "$orderby",
							"value": "journalTemplateName,journalBatchName,itemNumber",
							"description": "#41150,43035"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TransferSetup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvTransferSetups Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'primaryKey'\"] =  param.hasOwnProperty(\"primaryKey\");",
							"        tests[\"Body contains 'transferItemJnlTemplate'\"] =  param.hasOwnProperty(\"transferItemJnlTemplate\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvTransferSetups",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvTransferSetups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch Item Journal Line",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvItemJournalLines Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'journalTemplateName'\"] = jsonData.hasOwnProperty(\"journalTemplateName\");",
							"tests[\"Body contains 'journalBatchName'\"] = jsonData.hasOwnProperty(\"journalBatchName\");",
							"tests[\"Body contains 'lineNumber'\"] = jsonData.hasOwnProperty(\"lineNumber\");",
							"tests[\"Body contains 'itemNumber'\"] = jsonData.hasOwnProperty(\"itemNumber\");",
							"tests[\"Body contains 'documentNumber'\"] = jsonData.hasOwnProperty(\"documentNumber\");",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");",
							"tests[\"Body contains 'locationCode'\"] = jsonData.hasOwnProperty(\"locationCode\");",
							"tests[\"Body contains 'retailLocationCode'\"] = jsonData.hasOwnProperty(\"retailLocationCode\");",
							"tests[\"Body contains 'retailBinCode'\"] = jsonData.hasOwnProperty(\"retailBinCode\");",
							"tests[\"Body contains 'qtyCalculated'\"] = jsonData.hasOwnProperty(\"qtyCalculated\");",
							"tests[\"Body contains 'qtyPhysInventory'\"] = jsonData.hasOwnProperty(\"qtyPhysInventory\");",
							"tests[\"Body contains 'count1Qty'\"] = jsonData.hasOwnProperty(\"count1Qty\");",
							"tests[\"Body contains 'count2Qty'\"] = jsonData.hasOwnProperty(\"count2Qty\");",
							"tests[\"Body contains 'counted'\"] = jsonData.hasOwnProperty(\"counted\");",
							"tests[\"Body contains 'hfbNumber'\"] = jsonData.hasOwnProperty(\"hfbNumber\");",
							"tests[\"Body contains 'checkString'\"] = jsonData.hasOwnProperty(\"checkString\");",
							"tests[\"Body contains 'salesMethod'\"] = jsonData.hasOwnProperty(\"salesMethod\");",
							"tests[\"Body contains 'hasAddOnBin'\"] = jsonData.hasOwnProperty(\"hasAddOnBin\");",
							"tests[\"Body contains 'stockCountAction'\"] = jsonData.hasOwnProperty(\"stockCountAction\");",
							"tests[\"Body contains 'binSort'\"] = jsonData.hasOwnProperty(\"binSort\");",
							"tests[\"Body contains 'binAisle'\"] = jsonData.hasOwnProperty(\"binAisle\");",
							"tests[\"Body contains 'binLevel'\"] = jsonData.hasOwnProperty(\"binLevel\");",
							"tests[\"Body contains 'binColumn'\"] = jsonData.hasOwnProperty(\"binColumn\");"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "If-Match",
						"value": "*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"count1Qty\" : 10,\n\t\"documentNumber\" : \"ABC0002\"\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItemJournalLines(journalTemplateName='PHYS. INV.',journalBatchName='S0004',lineNumber=1580000)",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItemJournalLines(journalTemplateName='PHYS. INV.',journalBatchName='S0004',lineNumber=1580000)"
					]
				}
			},
			"response": []
		},
		{
			"name": "StockCountSetup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvStockCountSetups Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'primaryKey'\"] =  param.hasOwnProperty(\"primaryKey\");",
							"        tests[\"Body contains 'physInvJrnlTemplateName'\"] =  param.hasOwnProperty(\"physInvJrnlTemplateName\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvStockCountSetups",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvStockCountSetups"
					]
				}
			},
			"response": []
		},
		{
			"name": "MGFRoles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvMGFRoles Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains '@odata.etag'\"] = jsonData.hasOwnProperty(\"@odata.etag\");",
							"tests[\"Body contains 'number'\"] = jsonData.hasOwnProperty(\"number\");",
							"tests[\"Body contains 'description'\"] = jsonData.hasOwnProperty(\"description\");",
							"tests[\"Body contains 'active'\"] = jsonData.hasOwnProperty(\"active\");"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"type": "text",
						"value": "*"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"description\":\"change the description\"\n}"
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvMGFRoles(number='ACTIVE')",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvMGFRoles(number='ACTIVE')"
					]
				}
			},
			"response": []
		},
		{
			"name": "MGFRoles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvMGFRoles Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'number'\"] =  param.hasOwnProperty(\"number\");",
							"        tests[\"Body contains 'description'\"] =  param.hasOwnProperty(\"description\");",
							"        tests[\"Body contains 'active'\"] =  param.hasOwnProperty(\"active\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"type": "text",
						"value": "*"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvMGFRoles?$filter=active eq true",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvMGFRoles"
					],
					"query": [
						{
							"key": "$filter",
							"value": "active eq true",
							"description": "#45921"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MGFRoles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvMGFRoles Entity Automated Tests');",
							"tests[\"Status Code is 204\"] = responseCode.code === 204;",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvMGFRoles(number='INACTIVE')",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvMGFRoles(number='INACTIVE')"
					]
				}
			},
			"response": []
		},
		{
			"name": "RetailUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvRetailUsers Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'id'\"] =  param.hasOwnProperty(\"id\");",
							"        tests[\"Body contains 'locationCode'\"] =  param.hasOwnProperty(\"locationCode\");",
							"        tests[\"Body contains 'mgfRoles'\"] =  param.hasOwnProperty(\"mgfRoles\");",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvRetailUsers?$filter=id eq 'INGA'",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvRetailUsers"
					],
					"query": [
						{
							"key": "$filter",
							"value": "id eq 'INGA'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PickingSelections",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('imvPickingSelection Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");",
							"        tests[\"Body contains 'salesMethod'\"] =  param.hasOwnProperty(\"salesMethod\");",
							"        tests[\"Body contains 'storeNumber'\"] =  param.hasOwnProperty(\"storeNumber\");",
							"        tests[\"Body contains 'selectionOrder'\"] =  param.hasOwnProperty(\"selectionOrder\");",
							"        tests[\"Body contains 'pickingSelection'\"] =  param.hasOwnProperty(\"pickingSelection\");   ",
							"    })",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingSelections",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPickingSelections"
					]
				}
			},
			"response": []
		},
		{
			"name": "PickingOrders_BeginCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c274595b-8547-4cd6-a01b-5760d89e2afc",
						"exec": [
							"console.log('Picking Orders Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvPickingOrders(id=e76f1cb2-6659-401b-a5c7-077d53d5444d)/Microsoft.NAV.actionBeginCheck",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvPickingOrders(id=e76f1cb2-6659-401b-a5c7-077d53d5444d)",
						"Microsoft.NAV.actionBeginCheck"
					]
				}
			},
			"response": []
		},
		{
			"name": "InventoryLookup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "714310cf-f80d-4d06-83f2-7485797a97d0",
						"exec": [
							"console.log('imvStores Entity Automated Tests');\r",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");\r",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");\r",
							"\r",
							"if (jsonData.hasOwnProperty(\"value\"))\r",
							"{\r",
							"    jsonData.value.forEach(function(param){\r",
							"        tests[\"Body contains '@odata.etag'\"] = param.hasOwnProperty(\"@odata.etag\");\r",
							"        tests[\"Body contains 'itemNo'\"] = param.hasOwnProperty(\"itemNo\");\r",
							"        tests[\"Body contains 'storeNo'\"] = param.hasOwnProperty(\"storeNo\");\r",
							"        tests[\"Body contains 'storeName'\"] = param.hasOwnProperty(\"storeName\");\r",
							"        tests[\"Body contains 'hfbNo'\"] = param.hasOwnProperty(\"hfbNo\");\r",
							"        tests[\"Body contains 'salesMethod'\"] = param.hasOwnProperty(\"salesMethod\");\r",
							"        tests[\"Body contains 'unitPriceIncudingVAT'\"] = param.hasOwnProperty(\"unitPriceIncudingVAT\");\r",
							"        tests[\"Body contains 'activityPrice'\"] = param.hasOwnProperty(\"activityPrice\");\r",
							"        tests[\"Body contains 'qtyInPicking'\"] = param.hasOwnProperty(\"qtyInPicking\");\r",
							"        tests[\"Body contains 'pickingLocation'\"] = param.hasOwnProperty(\"pickingLocation\");\r",
							"        tests[\"Body contains 'pickingBin'\"] = param.hasOwnProperty(\"pickingBin\");\r",
							"        tests[\"Body contains 'buyableOnlineStatus'\"] = param.hasOwnProperty(\"buyableOnlineStatus\");\r",
							"        tests[\"Body contains 'blockedQty'\"] = param.hasOwnProperty(\"blockedQty\");\r",
							"        tests[\"Body contains 'sellableQty'\"] = param.hasOwnProperty(\"sellableQty\");\r",
							"        tests[\"Body contains 'arrivalQty'\"] = param.hasOwnProperty(\"arrivalQty\");\r",
							"        tests[\"Body contains 'arrivalWeek'\"] = param.hasOwnProperty(\"arrivalWeek\");    \r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "aekAEK123!@#",
							"type": "string"
						},
						{
							"key": "username",
							"value": "akhilesh",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvInventoryLookups?$filter=itemNo eq '60251383' and storeNo eq '235'",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvInventoryLookups"
					],
					"query": [
						{
							"key": "$filter",
							"value": "itemNo eq '60251383' and storeNo eq '235'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ItemMGF_TPSS",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6774287-e28f-4124-ac2d-4ecbace3f1ae",
						"exec": [
							"console.log('imvItems Entity Automated Tests');",
							"tests[\"Status Code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\").has(\"application/json\");",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Body contains '@odata.context'\"] = jsonData.hasOwnProperty(\"@odata.context\");",
							"tests[\"Body contains 'value'\"] = jsonData.hasOwnProperty(\"value\");",
							"",
							"var contentOdataEtagMissed, contentIdMissed, contentNumberMissed, contentDisplayNameMissed, contentDisplayNameInLocalLanguageMissed, contentunitPriceMissed, contentUnitPriceInclVATMissed, contentBlockedMissed, contentInactiveMissed, contentSalesStartDateMissed, contentEndDateSalesMissed, contentItemCategoryMissed, contentAssemblyItemMissed, contentWidthMissed, contentHeightMissed, contentLengthMissed, contentGrossWeightMissed, contentUnitVolumeMissed, contentLastModifiedDateTimeMissed, contentUnitsPerParcelMissed,contentimvItemsBuyableOnlineMissed, contentimvTPSalesSpacesMissed, contentimvItemsSellingInfoMissed,contentimvItemBinInfoMissed,contentimvArticlePalletMissed,contentimvItemAddonBinMissed;",
							"",
							"if (jsonData.hasOwnProperty(\"value\"))",
							"{",
							"    jsonData.value.forEach(function(param){",
							"        if(!param.hasOwnProperty(\"@odata.etag\"))",
							"            contentOdataEtagMissed = true;",
							"        if(!param.hasOwnProperty(\"id\"))",
							"            contentIdMissed = true;",
							"        if(!param.hasOwnProperty(\"number\"))",
							"            contentNumberMissed = true;",
							"        if(!param.hasOwnProperty(\"displayName\"))",
							"            contentDisplayNameMissed = true;",
							"        if(!param.hasOwnProperty(\"displayNameInLocalLanguage\"))",
							"            contentDisplayNameInLocalLanguageMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPrice\"))",
							"            contentunitPriceMissed = true;",
							"        if(!param.hasOwnProperty(\"unitPriceInclVAT\"))",
							"            contentUnitPriceInclVATMissed = true;",
							"        if(!param.hasOwnProperty(\"blocked\"))",
							"            contentBlockedMissed = true;",
							"        if(!param.hasOwnProperty(\"inactive\"))",
							"            contentInactiveMissed = true;",
							"        if(!param.hasOwnProperty(\"salesStartDate\"))",
							"            contentSalesStartDateMissed = true;",
							"        if(!param.hasOwnProperty(\"endDateSales\"))",
							"            contentEndDateSalesMissed = true;",
							"        if(!param.hasOwnProperty(\"itemCategory\"))",
							"            contentItemCategoryMissed = true;",
							"        if(!param.hasOwnProperty(\"assemblyItem\"))",
							"            contentAssemblyItemMissed = true;",
							"        if(!param.hasOwnProperty(\"width\"))",
							"            contentWidthMissed = true;",
							"        if(!param.hasOwnProperty(\"height\"))",
							"            contentHeightMissed = true;   ",
							"        if(!param.hasOwnProperty(\"length\"))",
							"            contentLengthMissed = true;",
							"        if(!param.hasOwnProperty(\"grossWeight\"))",
							"            contentGrossWeightMissed = true;  ",
							"        if(!param.hasOwnProperty(\"unitVolume\"))",
							"            contentUnitVolumeMissed = true;            ",
							"        if(!param.hasOwnProperty(\"lastModifiedDateTime\"))",
							"            contentLastModifiedDateTimeMissed = true;",
							"        if(!param.hasOwnProperty(\"LocationFilter\"))",
							"            contentLocationFilterMissed = false;            ",
							"        if(!param.hasOwnProperty(\"unitsPerParcel\"))",
							"            contentUnitsPerParcelMissed = true;",
							"        if(!param.hasOwnProperty(\"imvTPSalesSpaces\"))",
							"            contentimvTPSalesSpacesMissed = true;    ",
							"        if (param.hasOwnProperty(\"imvTPSalesSpaces\"))",
							"        {",
							"            param.imvTPSalesSpaces.forEach(function(param){",
							"                tests[\"imvTPSalesSpaces contains 'locationCode'\"] = param.hasOwnProperty(\"locationCode\");",
							"                tests[\"imvTPSalesSpaces contains 'itemNumber'\"] = param.hasOwnProperty(\"itemNumber\");",
							"                tests[\"imvTPSalesSpaces contains 'productDominance'\"] = param.hasOwnProperty(\"productDominance\");",
							"                tests[\"imvTPSalesSpaces contains 'salesSpaceType'\"] = param.hasOwnProperty(\"salesSpaceType\");",
							"                tests[\"imvTPSalesSpaces contains 'hfbNumber'\"] = param.hasOwnProperty(\"hfbNumber\");",
							"                tests[\"imvTPSalesSpaces contains 'productRangeAreaNumber'\"] = param.hasOwnProperty(\"productRangeAreaNumber\");",
							"                tests[\"imvTPSalesSpaces contains 'productAreaNumber'\"] = param.hasOwnProperty(\"productAreaNumber\");",
							"                tests[\"imvTPSalesSpaces contains 'calcReplenLevel'\"] = param.hasOwnProperty(\"calcReplenLevel\");",
							"                tests[\"imvTPSalesSpaces contains 'adjReplenLevel'\"] = param.hasOwnProperty(\"adjReplenLevel\");",
							"                tests[\"imvTPSalesSpaces contains 'defReplenLevel'\"] = param.hasOwnProperty(\"defReplenLevel\");",
							"                tests[\"imvTPSalesSpaces contains 'totalQtyOnOrder'\"] = param.hasOwnProperty(\"totalQtyOnOrder\");",
							"                tests[\"imvTPSalesSpaces contains 'totSalesSpaceSize'\"] = param.hasOwnProperty(\"totSalesSpaceSize\");",
							"                tests[\"imvTPSalesSpaces contains 'addonSpaceSize'\"] = param.hasOwnProperty(\"addonSpaceSize\");",
							"                tests[\"imvTPSalesSpaces contains 'pickingLocation'\"] = param.hasOwnProperty(\"pickingLocation\");",
							"                tests[\"imvTPSalesSpaces contains 'pickingBin'\"] = param.hasOwnProperty(\"pickingBin\");",
							"                tests[\"imvTPSalesSpaces contains 'qtyOTW'\"] = param.hasOwnProperty(\"qtyOTW\");",
							"                tests[\"imvTPSalesSpaces contains 'localMPQty'\"] = param.hasOwnProperty(\"localMPQty\");",
							"                tests[\"imvTPSalesSpaces contains 'localPalletQty'\"] = param.hasOwnProperty(\"localPalletQty\");",
							"                tests[\"imvTPSalesSpaces contains 'palletQuantity'\"] = param.hasOwnProperty(\"palletQuantity\");",
							"                tests[\"imvTPSalesSpaces contains 'multipackQuantity'\"] = param.hasOwnProperty(\"multipackQuantity\");",
							"                tests[\"imvTPSalesSpaces contains 'nextArrivalDate'\"] = param.hasOwnProperty(\"nextArrivalDate\");",
							"                tests[\"imvTPSalesSpaces contains 'nextArrivalQty'\"] = param.hasOwnProperty(\"nextArrivalQty\");",
							"                tests[\"imvTPSalesSpaces contains 'leadTime'\"] = param.hasOwnProperty(\"leadTime\");",
							"                tests[\"imvTPSalesSpaces contains 'gFClassification'\"] = param.hasOwnProperty(\"gFClassification\");",
							"                tests[\"imvTPSalesSpaces contains 'eWStock'\"] = param.hasOwnProperty(\"eWStock\");",
							"                tests[\"imvTPSalesSpaces contains 'unitPrice'\"] = param.hasOwnProperty(\"unitPrice\");",
							"            })",
							"        }",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mvxtesting.k3devops.nl:7048/NAV/api/beta/companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)/imvItems?$filter=number eq '20205449'&$expand=imvTPSalesSpaces($filter=(locationCode eq '235'))",
					"protocol": "https",
					"host": [
						"mvxtesting",
						"k3devops",
						"nl"
					],
					"port": "7048",
					"path": [
						"NAV",
						"api",
						"beta",
						"companies(0ca924ca-0443-499a-87a3-6f9bfc998e96)",
						"imvItems"
					],
					"query": [
						{
							"key": "$filter",
							"value": "number eq '20205449'"
						},
						{
							"key": "$expand",
							"value": "imvTPSalesSpaces($filter=(locationCode eq '235'))"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}